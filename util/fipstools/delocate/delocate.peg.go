package main

// Code generated by ./peg delocate.peg DO NOT EDIT.

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleAsmFile
	ruleStatement
	ruleGlobalDirective
	ruleDirective
	ruleDirectiveName
	ruleLocationDirective
	ruleFileDirective
	ruleLocDirective
	ruleArgs
	ruleArg
	ruleQuotedArg
	ruleQuotedText
	ruleLabelContainingDirective
	ruleLabelContainingDirectiveName
	ruleSymbolArgs
	ruleSymbolArg
	ruleSymbolExpr
	ruleSymbolAtom
	ruleSymbolOperator
	ruleOpenParen
	ruleCloseParen
	ruleSymbolType
	ruleDot
	ruleTCMarker
	ruleEscapedChar
	ruleWS
	ruleComment
	ruleLabel
	ruleSymbolName
	ruleLocalSymbol
	ruleLocalLabel
	ruleLocalLabelRef
	ruleInstruction
	ruleInstructionName
	ruleInstructionArg
	ruleGOTLocation
	ruleGOTSymbolOffset
	ruleAVX512Token
	ruleTOCRefHigh
	ruleTOCRefLow
	ruleIndirectionIndicator
	ruleRegisterOrConstant
	ruleARMConstantTweak
	ruleARMRegister
	ruleARMVectorRegister
	ruleMemoryRef
	ruleSymbolRef
	ruleLow12BitsSymbolRef
	ruleARMBaseIndexScale
	ruleARMGOTLow12
	ruleARMPostincrement
	ruleBaseIndexScale
	ruleOperator
	ruleOffset
	ruleSection
	ruleSegmentRegister
)

var rul3s = [...]string{
	"Unknown",
	"AsmFile",
	"Statement",
	"GlobalDirective",
	"Directive",
	"DirectiveName",
	"LocationDirective",
	"FileDirective",
	"LocDirective",
	"Args",
	"Arg",
	"QuotedArg",
	"QuotedText",
	"LabelContainingDirective",
	"LabelContainingDirectiveName",
	"SymbolArgs",
	"SymbolArg",
	"SymbolExpr",
	"SymbolAtom",
	"SymbolOperator",
	"OpenParen",
	"CloseParen",
	"SymbolType",
	"Dot",
	"TCMarker",
	"EscapedChar",
	"WS",
	"Comment",
	"Label",
	"SymbolName",
	"LocalSymbol",
	"LocalLabel",
	"LocalLabelRef",
	"Instruction",
	"InstructionName",
	"InstructionArg",
	"GOTLocation",
	"GOTSymbolOffset",
	"AVX512Token",
	"TOCRefHigh",
	"TOCRefLow",
	"IndirectionIndicator",
	"RegisterOrConstant",
	"ARMConstantTweak",
	"ARMRegister",
	"ARMVectorRegister",
	"MemoryRef",
	"SymbolRef",
	"Low12BitsSymbolRef",
	"ARMBaseIndexScale",
	"ARMGOTLow12",
	"ARMPostincrement",
	"BaseIndexScale",
	"Operator",
	"Offset",
	"Section",
	"SegmentRegister",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Asm struct {
	Buffer         string
	buffer         []rune
	rules          [57]func() bool
	parse          func(rule ...int) error
	reset          func()
	Pretty         bool
	disableMemoize bool
	tokens32
}

func (p *Asm) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Asm) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Asm
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Asm) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Asm) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Asm) SprintSyntaxTree() string {
	var b bytes.Buffer
	p.WriteSyntaxTree(&b)
	return b.String()
}

func Pretty(pretty bool) func(*Asm) error {
	return func(p *Asm) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Asm) error {
	return func(p *Asm) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}

func DisableMemoize() func(*Asm) error {
	return func(p *Asm) error {
		p.disableMemoize = true
		return nil
	}
}

type memo struct {
	Matched bool
	Partial []token32
}

type memoKey struct {
	Rule     uint32
	Position uint32
}

func (p *Asm) Init(options ...func(*Asm) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		memoization          map[memoKey]memo
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0
		memoization = make(map[memoKey]memo)
		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	memoize := func(rule uint32, begin uint32, tokenIndexStart uint32, matched bool) {
		if p.disableMemoize {
			return
		}
		key := memoKey{rule, begin}
		if !matched {
			memoization[key] = memo{Matched: false}
		} else {
			t := tree.tree[tokenIndexStart:tokenIndex]
			tokenCopy := make([]token32, len(t))
			copy(tokenCopy, t)
			memoization[key] = memo{Matched: true, Partial: tokenCopy}
		}
	}

	memoizedResult := func(m memo) bool {
		if !m.Matched {
			return false
		}
		tree.tree = append(tree.tree[:tokenIndex], m.Partial...)
		tokenIndex += uint32(len(m.Partial))
		position = m.Partial[len(m.Partial)-1].end
		if tree.tree[tokenIndex-1].begin != position && position > max.end {
			max = tree.tree[tokenIndex-1]
		}
		return true
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 AsmFile <- <(Statement* !.)> */
		func() bool {
			if memoized, ok := memoization[memoKey{0, position}]; ok {
				return memoizedResult(memoized)
			}
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleStatement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleAsmFile, position1)
			}
			memoize(0, position0, tokenIndex0, true)
			return true
		l0:
			memoize(0, position0, tokenIndex0, false)
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Statement <- <(WS? (Label / ((GlobalDirective / LocationDirective / LabelContainingDirective / Instruction / Directive / Comment / ) WS? ((Comment? '\n') / ';'))))> */
		func() bool {
			if memoized, ok := memoization[memoKey{1, position}]; ok {
				return memoizedResult(memoized)
			}
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l7
					}
					goto l8
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleLabel]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[ruleGlobalDirective]() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLocationDirective]() {
							goto l13
						}
						goto l11
					l13:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLabelContainingDirective]() {
							goto l14
						}
						goto l11
					l14:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleInstruction]() {
							goto l15
						}
						goto l11
					l15:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleDirective]() {
							goto l16
						}
						goto l11
					l16:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleComment]() {
							goto l17
						}
						goto l11
					l17:
						position, tokenIndex = position11, tokenIndex11
					}
				l11:
					{
						position18, tokenIndex18 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l18
						}
						goto l19
					l18:
						position, tokenIndex = position18, tokenIndex18
					}
				l19:
					{
						position20, tokenIndex20 := position, tokenIndex
						{
							position22, tokenIndex22 := position, tokenIndex
							if !_rules[ruleComment]() {
								goto l22
							}
							goto l23
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
					l23:
						if buffer[position] != rune('\n') {
							goto l21
						}
						position++
						goto l20
					l21:
						position, tokenIndex = position20, tokenIndex20
						if buffer[position] != rune(';') {
							goto l5
						}
						position++
					}
				l20:
				}
			l9:
				add(ruleStatement, position6)
			}
			memoize(1, position5, tokenIndex5, true)
			return true
		l5:
			memoize(1, position5, tokenIndex5, false)
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 GlobalDirective <- <((('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('a' / 'A') ('l' / 'L')) / ('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('l' / 'L'))) WS SymbolName)> */
		func() bool {
			if memoized, ok := memoization[memoKey{2, position}]; ok {
				return memoizedResult(memoized)
			}
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l27
					}
					position++
					{
						position28, tokenIndex28 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l29
						}
						position++
						goto l28
					l29:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('G') {
							goto l27
						}
						position++
					}
				l28:
					{
						position30, tokenIndex30 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l31
						}
						position++
						goto l30
					l31:
						position, tokenIndex = position30, tokenIndex30
						if buffer[position] != rune('L') {
							goto l27
						}
						position++
					}
				l30:
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('O') {
							goto l27
						}
						position++
					}
				l32:
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('B') {
							goto l27
						}
						position++
					}
				l34:
					{
						position36, tokenIndex36 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l37
						}
						position++
						goto l36
					l37:
						position, tokenIndex = position36, tokenIndex36
						if buffer[position] != rune('A') {
							goto l27
						}
						position++
					}
				l36:
					{
						position38, tokenIndex38 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l39
						}
						position++
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						if buffer[position] != rune('L') {
							goto l27
						}
						position++
					}
				l38:
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('.') {
						goto l24
					}
					position++
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune('G') {
							goto l24
						}
						position++
					}
				l40:
					{
						position42, tokenIndex42 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l43
						}
						position++
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						if buffer[position] != rune('L') {
							goto l24
						}
						position++
					}
				l42:
					{
						position44, tokenIndex44 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l45
						}
						position++
						goto l44
					l45:
						position, tokenIndex = position44, tokenIndex44
						if buffer[position] != rune('O') {
							goto l24
						}
						position++
					}
				l44:
					{
						position46, tokenIndex46 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l47
						}
						position++
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						if buffer[position] != rune('B') {
							goto l24
						}
						position++
					}
				l46:
					{
						position48, tokenIndex48 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l49
						}
						position++
						goto l48
					l49:
						position, tokenIndex = position48, tokenIndex48
						if buffer[position] != rune('L') {
							goto l24
						}
						position++
					}
				l48:
				}
			l26:
				if !_rules[ruleWS]() {
					goto l24
				}
				if !_rules[ruleSymbolName]() {
					goto l24
				}
				add(ruleGlobalDirective, position25)
			}
			memoize(2, position24, tokenIndex24, true)
			return true
		l24:
			memoize(2, position24, tokenIndex24, false)
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 3 Directive <- <('.' DirectiveName (WS Args)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{3, position}]; ok {
				return memoizedResult(memoized)
			}
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if buffer[position] != rune('.') {
					goto l50
				}
				position++
				if !_rules[ruleDirectiveName]() {
					goto l50
				}
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l52
					}
					if !_rules[ruleArgs]() {
						goto l52
					}
					goto l53
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				add(ruleDirective, position51)
			}
			memoize(3, position50, tokenIndex50, true)
			return true
		l50:
			memoize(3, position50, tokenIndex50, false)
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 4 DirectiveName <- <([a-z] / [A-Z] / ([0-9] / [0-9]) / '_')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{4, position}]; ok {
				return memoizedResult(memoized)
			}
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position58, tokenIndex58 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l59
					}
					position++
					goto l58
				l59:
					position, tokenIndex = position58, tokenIndex58
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l60
					}
					position++
					goto l58
				l60:
					position, tokenIndex = position58, tokenIndex58
					{
						position62, tokenIndex62 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l63
						}
						position++
						goto l62
					l63:
						position, tokenIndex = position62, tokenIndex62
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l61
						}
						position++
					}
				l62:
					goto l58
				l61:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('_') {
						goto l54
					}
					position++
				}
			l58:
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position64, tokenIndex64 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l65
						}
						position++
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l66
						}
						position++
						goto l64
					l66:
						position, tokenIndex = position64, tokenIndex64
						{
							position68, tokenIndex68 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l69
							}
							position++
							goto l68
						l69:
							position, tokenIndex = position68, tokenIndex68
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l67
							}
							position++
						}
					l68:
						goto l64
					l67:
						position, tokenIndex = position64, tokenIndex64
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
					}
				l64:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleDirectiveName, position55)
			}
			memoize(4, position54, tokenIndex54, true)
			return true
		l54:
			memoize(4, position54, tokenIndex54, false)
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 5 LocationDirective <- <(FileDirective / LocDirective)> */
		func() bool {
			if memoized, ok := memoization[memoKey{5, position}]; ok {
				return memoizedResult(memoized)
			}
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if !_rules[ruleFileDirective]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleLocDirective]() {
						goto l70
					}
				}
			l72:
				add(ruleLocationDirective, position71)
			}
			memoize(5, position70, tokenIndex70, true)
			return true
		l70:
			memoize(5, position70, tokenIndex70, false)
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 6 FileDirective <- <('.' ('f' / 'F') ('i' / 'I') ('l' / 'L') ('e' / 'E') WS (!('#' / '\n') .)+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{6, position}]; ok {
				return memoizedResult(memoized)
			}
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				if buffer[position] != rune('.') {
					goto l74
				}
				position++
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l77
					}
					position++
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					if buffer[position] != rune('F') {
						goto l74
					}
					position++
				}
			l76:
				{
					position78, tokenIndex78 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l79
					}
					position++
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if buffer[position] != rune('I') {
						goto l74
					}
					position++
				}
			l78:
				{
					position80, tokenIndex80 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l81
					}
					position++
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if buffer[position] != rune('L') {
						goto l74
					}
					position++
				}
			l80:
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if buffer[position] != rune('E') {
						goto l74
					}
					position++
				}
			l82:
				if !_rules[ruleWS]() {
					goto l74
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position87, tokenIndex87 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l88
						}
						position++
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if buffer[position] != rune('\n') {
							goto l86
						}
						position++
					}
				l87:
					goto l74
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				if !matchDot() {
					goto l74
				}
			l84:
				{
					position85, tokenIndex85 := position, tokenIndex
					{
						position89, tokenIndex89 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l91
							}
							position++
							goto l90
						l91:
							position, tokenIndex = position90, tokenIndex90
							if buffer[position] != rune('\n') {
								goto l89
							}
							position++
						}
					l90:
						goto l85
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					if !matchDot() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position85, tokenIndex85
				}
				add(ruleFileDirective, position75)
			}
			memoize(6, position74, tokenIndex74, true)
			return true
		l74:
			memoize(6, position74, tokenIndex74, false)
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 7 LocDirective <- <('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') WS (!('#' / '/' / '\n') .)+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{7, position}]; ok {
				return memoizedResult(memoized)
			}
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if buffer[position] != rune('.') {
					goto l92
				}
				position++
				{
					position94, tokenIndex94 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if buffer[position] != rune('L') {
						goto l92
					}
					position++
				}
			l94:
				{
					position96, tokenIndex96 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l97
					}
					position++
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('O') {
						goto l92
					}
					position++
				}
			l96:
				{
					position98, tokenIndex98 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l99
					}
					position++
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if buffer[position] != rune('C') {
						goto l92
					}
					position++
				}
			l98:
				if !_rules[ruleWS]() {
					goto l92
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('/') {
							goto l105
						}
						position++
						goto l103
					l105:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('\n') {
							goto l102
						}
						position++
					}
				l103:
					goto l92
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
				if !matchDot() {
					goto l92
				}
			l100:
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						{
							position107, tokenIndex107 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l108
							}
							position++
							goto l107
						l108:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('/') {
								goto l109
							}
							position++
							goto l107
						l109:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('\n') {
								goto l106
							}
							position++
						}
					l107:
						goto l101
					l106:
						position, tokenIndex = position106, tokenIndex106
					}
					if !matchDot() {
						goto l101
					}
					goto l100
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				add(ruleLocDirective, position93)
			}
			memoize(7, position92, tokenIndex92, true)
			return true
		l92:
			memoize(7, position92, tokenIndex92, false)
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 8 Args <- <(Arg (WS? ',' WS? Arg)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{8, position}]; ok {
				return memoizedResult(memoized)
			}
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if !_rules[ruleArg]() {
					goto l110
				}
			l112:
				{
					position113, tokenIndex113 := position, tokenIndex
					{
						position114, tokenIndex114 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l114
						}
						goto l115
					l114:
						position, tokenIndex = position114, tokenIndex114
					}
				l115:
					if buffer[position] != rune(',') {
						goto l113
					}
					position++
					{
						position116, tokenIndex116 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l116
						}
						goto l117
					l116:
						position, tokenIndex = position116, tokenIndex116
					}
				l117:
					if !_rules[ruleArg]() {
						goto l113
					}
					goto l112
				l113:
					position, tokenIndex = position113, tokenIndex113
				}
				add(ruleArgs, position111)
			}
			memoize(8, position110, tokenIndex110, true)
			return true
		l110:
			memoize(8, position110, tokenIndex110, false)
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 Arg <- <(QuotedArg / ([0-9] / [0-9] / ([a-z] / [A-Z]) / '%' / '+' / '-' / '*' / '_' / '@' / '.')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{9, position}]; ok {
				return memoizedResult(memoized)
			}
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[ruleQuotedArg]() {
						goto l121
					}
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
				l122:
					{
						position123, tokenIndex123 := position, tokenIndex
						{
							position124, tokenIndex124 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l125
							}
							position++
							goto l124
						l125:
							position, tokenIndex = position124, tokenIndex124
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l126
							}
							position++
							goto l124
						l126:
							position, tokenIndex = position124, tokenIndex124
							{
								position128, tokenIndex128 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l129
								}
								position++
								goto l128
							l129:
								position, tokenIndex = position128, tokenIndex128
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l127
								}
								position++
							}
						l128:
							goto l124
						l127:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('%') {
								goto l130
							}
							position++
							goto l124
						l130:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('+') {
								goto l131
							}
							position++
							goto l124
						l131:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('-') {
								goto l132
							}
							position++
							goto l124
						l132:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('*') {
								goto l133
							}
							position++
							goto l124
						l133:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('_') {
								goto l134
							}
							position++
							goto l124
						l134:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('@') {
								goto l135
							}
							position++
							goto l124
						l135:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('.') {
								goto l123
							}
							position++
						}
					l124:
						goto l122
					l123:
						position, tokenIndex = position123, tokenIndex123
					}
				}
			l120:
				add(ruleArg, position119)
			}
			memoize(9, position118, tokenIndex118, true)
			return true
		},
		/* 10 QuotedArg <- <('"' QuotedText '"')> */
		func() bool {
			if memoized, ok := memoization[memoKey{10, position}]; ok {
				return memoizedResult(memoized)
			}
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('"') {
					goto l136
				}
				position++
				if !_rules[ruleQuotedText]() {
					goto l136
				}
				if buffer[position] != rune('"') {
					goto l136
				}
				position++
				add(ruleQuotedArg, position137)
			}
			memoize(10, position136, tokenIndex136, true)
			return true
		l136:
			memoize(10, position136, tokenIndex136, false)
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 11 QuotedText <- <(EscapedChar / (!'"' .))*> */
		func() bool {
			if memoized, ok := memoization[memoKey{11, position}]; ok {
				return memoizedResult(memoized)
			}
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
			l140:
				{
					position141, tokenIndex141 := position, tokenIndex
					{
						position142, tokenIndex142 := position, tokenIndex
						if !_rules[ruleEscapedChar]() {
							goto l143
						}
						goto l142
					l143:
						position, tokenIndex = position142, tokenIndex142
						{
							position144, tokenIndex144 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l144
							}
							position++
							goto l141
						l144:
							position, tokenIndex = position144, tokenIndex144
						}
						if !matchDot() {
							goto l141
						}
					}
				l142:
					goto l140
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				add(ruleQuotedText, position139)
			}
			memoize(11, position138, tokenIndex138, true)
			return true
		},
		/* 12 LabelContainingDirective <- <(LabelContainingDirectiveName WS SymbolArgs)> */
		func() bool {
			if memoized, ok := memoization[memoKey{12, position}]; ok {
				return memoizedResult(memoized)
			}
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if !_rules[ruleLabelContainingDirectiveName]() {
					goto l145
				}
				if !_rules[ruleWS]() {
					goto l145
				}
				if !_rules[ruleSymbolArgs]() {
					goto l145
				}
				add(ruleLabelContainingDirective, position146)
			}
			memoize(12, position145, tokenIndex145, true)
			return true
		l145:
			memoize(12, position145, tokenIndex145, false)
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 13 LabelContainingDirectiveName <- <(('.' ('x' / 'X') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('h' / 'H') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('l' / 'L') ('o' / 'O') ('n' / 'N') ('g' / 'G')) / ('.' ('s' / 'S') ('e' / 'E') ('t' / 'T')) / ('.' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '8' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '4' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' ('q' / 'Q') ('u' / 'U') ('a' / 'A') ('d' / 'D')) / ('.' ('t' / 'T') ('c' / 'C')) / ('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') ('a' / 'A') ('l' / 'L') ('e' / 'E') ('n' / 'N') ('t' / 'T') ('r' / 'R') ('y' / 'Y')) / ('.' ('s' / 'S') ('i' / 'I') ('z' / 'Z') ('e' / 'E')) / ('.' ('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')) / ('.' ('u' / 'U') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8') / ('.' ('s' / 'S') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{13, position}]; ok {
				return memoizedResult(memoized)
			}
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l150
					}
					position++
					{
						position151, tokenIndex151 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l152
						}
						position++
						goto l151
					l152:
						position, tokenIndex = position151, tokenIndex151
						if buffer[position] != rune('X') {
							goto l150
						}
						position++
					}
				l151:
					{
						position153, tokenIndex153 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l154
						}
						position++
						goto l153
					l154:
						position, tokenIndex = position153, tokenIndex153
						if buffer[position] != rune('W') {
							goto l150
						}
						position++
					}
				l153:
					{
						position155, tokenIndex155 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l156
						}
						position++
						goto l155
					l156:
						position, tokenIndex = position155, tokenIndex155
						if buffer[position] != rune('O') {
							goto l150
						}
						position++
					}
				l155:
					{
						position157, tokenIndex157 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l158
						}
						position++
						goto l157
					l158:
						position, tokenIndex = position157, tokenIndex157
						if buffer[position] != rune('R') {
							goto l150
						}
						position++
					}
				l157:
					{
						position159, tokenIndex159 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l160
						}
						position++
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						if buffer[position] != rune('D') {
							goto l150
						}
						position++
					}
				l159:
					goto l149
				l150:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l161
					}
					position++
					{
						position162, tokenIndex162 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l163
						}
						position++
						goto l162
					l163:
						position, tokenIndex = position162, tokenIndex162
						if buffer[position] != rune('W') {
							goto l161
						}
						position++
					}
				l162:
					{
						position164, tokenIndex164 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l165
						}
						position++
						goto l164
					l165:
						position, tokenIndex = position164, tokenIndex164
						if buffer[position] != rune('O') {
							goto l161
						}
						position++
					}
				l164:
					{
						position166, tokenIndex166 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l167
						}
						position++
						goto l166
					l167:
						position, tokenIndex = position166, tokenIndex166
						if buffer[position] != rune('R') {
							goto l161
						}
						position++
					}
				l166:
					{
						position168, tokenIndex168 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l169
						}
						position++
						goto l168
					l169:
						position, tokenIndex = position168, tokenIndex168
						if buffer[position] != rune('D') {
							goto l161
						}
						position++
					}
				l168:
					goto l149
				l161:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l170
					}
					position++
					{
						position171, tokenIndex171 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l172
						}
						position++
						goto l171
					l172:
						position, tokenIndex = position171, tokenIndex171
						if buffer[position] != rune('H') {
							goto l170
						}
						position++
					}
				l171:
					{
						position173, tokenIndex173 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l174
						}
						position++
						goto l173
					l174:
						position, tokenIndex = position173, tokenIndex173
						if buffer[position] != rune('W') {
							goto l170
						}
						position++
					}
				l173:
					{
						position175, tokenIndex175 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l176
						}
						position++
						goto l175
					l176:
						position, tokenIndex = position175, tokenIndex175
						if buffer[position] != rune('O') {
							goto l170
						}
						position++
					}
				l175:
					{
						position177, tokenIndex177 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l178
						}
						position++
						goto l177
					l178:
						position, tokenIndex = position177, tokenIndex177
						if buffer[position] != rune('R') {
							goto l170
						}
						position++
					}
				l177:
					{
						position179, tokenIndex179 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l180
						}
						position++
						goto l179
					l180:
						position, tokenIndex = position179, tokenIndex179
						if buffer[position] != rune('D') {
							goto l170
						}
						position++
					}
				l179:
					goto l149
				l170:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l181
					}
					position++
					{
						position182, tokenIndex182 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l183
						}
						position++
						goto l182
					l183:
						position, tokenIndex = position182, tokenIndex182
						if buffer[position] != rune('L') {
							goto l181
						}
						position++
					}
				l182:
					{
						position184, tokenIndex184 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l185
						}
						position++
						goto l184
					l185:
						position, tokenIndex = position184, tokenIndex184
						if buffer[position] != rune('O') {
							goto l181
						}
						position++
					}
				l184:
					{
						position186, tokenIndex186 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l187
						}
						position++
						goto l186
					l187:
						position, tokenIndex = position186, tokenIndex186
						if buffer[position] != rune('N') {
							goto l181
						}
						position++
					}
				l186:
					{
						position188, tokenIndex188 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l189
						}
						position++
						goto l188
					l189:
						position, tokenIndex = position188, tokenIndex188
						if buffer[position] != rune('G') {
							goto l181
						}
						position++
					}
				l188:
					goto l149
				l181:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l190
					}
					position++
					{
						position191, tokenIndex191 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l192
						}
						position++
						goto l191
					l192:
						position, tokenIndex = position191, tokenIndex191
						if buffer[position] != rune('S') {
							goto l190
						}
						position++
					}
				l191:
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('E') {
							goto l190
						}
						position++
					}
				l193:
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('T') {
							goto l190
						}
						position++
					}
				l195:
					goto l149
				l190:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l197
					}
					position++
					{
						position198, tokenIndex198 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l199
						}
						position++
						goto l198
					l199:
						position, tokenIndex = position198, tokenIndex198
						if buffer[position] != rune('B') {
							goto l197
						}
						position++
					}
				l198:
					{
						position200, tokenIndex200 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l201
						}
						position++
						goto l200
					l201:
						position, tokenIndex = position200, tokenIndex200
						if buffer[position] != rune('Y') {
							goto l197
						}
						position++
					}
				l200:
					{
						position202, tokenIndex202 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l203
						}
						position++
						goto l202
					l203:
						position, tokenIndex = position202, tokenIndex202
						if buffer[position] != rune('T') {
							goto l197
						}
						position++
					}
				l202:
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l205
						}
						position++
						goto l204
					l205:
						position, tokenIndex = position204, tokenIndex204
						if buffer[position] != rune('E') {
							goto l197
						}
						position++
					}
				l204:
					goto l149
				l197:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l206
					}
					position++
					if buffer[position] != rune('8') {
						goto l206
					}
					position++
					{
						position207, tokenIndex207 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l208
						}
						position++
						goto l207
					l208:
						position, tokenIndex = position207, tokenIndex207
						if buffer[position] != rune('B') {
							goto l206
						}
						position++
					}
				l207:
					{
						position209, tokenIndex209 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l210
						}
						position++
						goto l209
					l210:
						position, tokenIndex = position209, tokenIndex209
						if buffer[position] != rune('Y') {
							goto l206
						}
						position++
					}
				l209:
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('T') {
							goto l206
						}
						position++
					}
				l211:
					{
						position213, tokenIndex213 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l214
						}
						position++
						goto l213
					l214:
						position, tokenIndex = position213, tokenIndex213
						if buffer[position] != rune('E') {
							goto l206
						}
						position++
					}
				l213:
					goto l149
				l206:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l215
					}
					position++
					if buffer[position] != rune('4') {
						goto l215
					}
					position++
					{
						position216, tokenIndex216 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l217
						}
						position++
						goto l216
					l217:
						position, tokenIndex = position216, tokenIndex216
						if buffer[position] != rune('B') {
							goto l215
						}
						position++
					}
				l216:
					{
						position218, tokenIndex218 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l219
						}
						position++
						goto l218
					l219:
						position, tokenIndex = position218, tokenIndex218
						if buffer[position] != rune('Y') {
							goto l215
						}
						position++
					}
				l218:
					{
						position220, tokenIndex220 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l221
						}
						position++
						goto l220
					l221:
						position, tokenIndex = position220, tokenIndex220
						if buffer[position] != rune('T') {
							goto l215
						}
						position++
					}
				l220:
					{
						position222, tokenIndex222 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('E') {
							goto l215
						}
						position++
					}
				l222:
					goto l149
				l215:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l224
					}
					position++
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('q') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('Q') {
							goto l224
						}
						position++
					}
				l225:
					{
						position227, tokenIndex227 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l228
						}
						position++
						goto l227
					l228:
						position, tokenIndex = position227, tokenIndex227
						if buffer[position] != rune('U') {
							goto l224
						}
						position++
					}
				l227:
					{
						position229, tokenIndex229 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l230
						}
						position++
						goto l229
					l230:
						position, tokenIndex = position229, tokenIndex229
						if buffer[position] != rune('A') {
							goto l224
						}
						position++
					}
				l229:
					{
						position231, tokenIndex231 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l232
						}
						position++
						goto l231
					l232:
						position, tokenIndex = position231, tokenIndex231
						if buffer[position] != rune('D') {
							goto l224
						}
						position++
					}
				l231:
					goto l149
				l224:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l233
					}
					position++
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('T') {
							goto l233
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('C') {
							goto l233
						}
						position++
					}
				l236:
					goto l149
				l233:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l238
					}
					position++
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l240
						}
						position++
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('L') {
							goto l238
						}
						position++
					}
				l239:
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('O') {
							goto l238
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('C') {
							goto l238
						}
						position++
					}
				l243:
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l246
						}
						position++
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('A') {
							goto l238
						}
						position++
					}
				l245:
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('L') {
							goto l238
						}
						position++
					}
				l247:
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('E') {
							goto l238
						}
						position++
					}
				l249:
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('N') {
							goto l238
						}
						position++
					}
				l251:
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('T') {
							goto l238
						}
						position++
					}
				l253:
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('R') {
							goto l238
						}
						position++
					}
				l255:
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l258
						}
						position++
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if buffer[position] != rune('Y') {
							goto l238
						}
						position++
					}
				l257:
					goto l149
				l238:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					{
						position260, tokenIndex260 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l261
						}
						position++
						goto l260
					l261:
						position, tokenIndex = position260, tokenIndex260
						if buffer[position] != rune('S') {
							goto l259
						}
						position++
					}
				l260:
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('I') {
							goto l259
						}
						position++
					}
				l262:
					{
						position264, tokenIndex264 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l265
						}
						position++
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if buffer[position] != rune('Z') {
							goto l259
						}
						position++
					}
				l264:
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('E') {
							goto l259
						}
						position++
					}
				l266:
					goto l149
				l259:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l268
					}
					position++
					{
						position269, tokenIndex269 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l270
						}
						position++
						goto l269
					l270:
						position, tokenIndex = position269, tokenIndex269
						if buffer[position] != rune('T') {
							goto l268
						}
						position++
					}
				l269:
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('Y') {
							goto l268
						}
						position++
					}
				l271:
					{
						position273, tokenIndex273 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l274
						}
						position++
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('P') {
							goto l268
						}
						position++
					}
				l273:
					{
						position275, tokenIndex275 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l276
						}
						position++
						goto l275
					l276:
						position, tokenIndex = position275, tokenIndex275
						if buffer[position] != rune('E') {
							goto l268
						}
						position++
					}
				l275:
					goto l149
				l268:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l277
					}
					position++
					{
						position278, tokenIndex278 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l279
						}
						position++
						goto l278
					l279:
						position, tokenIndex = position278, tokenIndex278
						if buffer[position] != rune('U') {
							goto l277
						}
						position++
					}
				l278:
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l281
						}
						position++
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('L') {
							goto l277
						}
						position++
					}
				l280:
					{
						position282, tokenIndex282 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l283
						}
						position++
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('E') {
							goto l277
						}
						position++
					}
				l282:
					{
						position284, tokenIndex284 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l285
						}
						position++
						goto l284
					l285:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('B') {
							goto l277
						}
						position++
					}
				l284:
					if buffer[position] != rune('1') {
						goto l277
					}
					position++
					if buffer[position] != rune('2') {
						goto l277
					}
					position++
					if buffer[position] != rune('8') {
						goto l277
					}
					position++
					goto l149
				l277:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					{
						position286, tokenIndex286 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l287
						}
						position++
						goto l286
					l287:
						position, tokenIndex = position286, tokenIndex286
						if buffer[position] != rune('S') {
							goto l147
						}
						position++
					}
				l286:
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('L') {
							goto l147
						}
						position++
					}
				l288:
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('E') {
							goto l147
						}
						position++
					}
				l290:
					{
						position292, tokenIndex292 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l293
						}
						position++
						goto l292
					l293:
						position, tokenIndex = position292, tokenIndex292
						if buffer[position] != rune('B') {
							goto l147
						}
						position++
					}
				l292:
					if buffer[position] != rune('1') {
						goto l147
					}
					position++
					if buffer[position] != rune('2') {
						goto l147
					}
					position++
					if buffer[position] != rune('8') {
						goto l147
					}
					position++
				}
			l149:
				add(ruleLabelContainingDirectiveName, position148)
			}
			memoize(13, position147, tokenIndex147, true)
			return true
		l147:
			memoize(13, position147, tokenIndex147, false)
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 14 SymbolArgs <- <(SymbolArg (WS? ',' WS? SymbolArg)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{14, position}]; ok {
				return memoizedResult(memoized)
			}
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if !_rules[ruleSymbolArg]() {
					goto l294
				}
			l296:
				{
					position297, tokenIndex297 := position, tokenIndex
					{
						position298, tokenIndex298 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l298
						}
						goto l299
					l298:
						position, tokenIndex = position298, tokenIndex298
					}
				l299:
					if buffer[position] != rune(',') {
						goto l297
					}
					position++
					{
						position300, tokenIndex300 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l300
						}
						goto l301
					l300:
						position, tokenIndex = position300, tokenIndex300
					}
				l301:
					if !_rules[ruleSymbolArg]() {
						goto l297
					}
					goto l296
				l297:
					position, tokenIndex = position297, tokenIndex297
				}
				add(ruleSymbolArgs, position295)
			}
			memoize(14, position294, tokenIndex294, true)
			return true
		l294:
			memoize(14, position294, tokenIndex294, false)
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 15 SymbolArg <- <SymbolExpr> */
		func() bool {
			if memoized, ok := memoization[memoKey{15, position}]; ok {
				return memoizedResult(memoized)
			}
			position302, tokenIndex302 := position, tokenIndex
			{
				position303 := position
				if !_rules[ruleSymbolExpr]() {
					goto l302
				}
				add(ruleSymbolArg, position303)
			}
			memoize(15, position302, tokenIndex302, true)
			return true
		l302:
			memoize(15, position302, tokenIndex302, false)
			position, tokenIndex = position302, tokenIndex302
			return false
		},
		/* 16 SymbolExpr <- <(SymbolAtom (WS? SymbolOperator WS? SymbolExpr)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{16, position}]; ok {
				return memoizedResult(memoized)
			}
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				if !_rules[ruleSymbolAtom]() {
					goto l304
				}
				{
					position306, tokenIndex306 := position, tokenIndex
					{
						position308, tokenIndex308 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l308
						}
						goto l309
					l308:
						position, tokenIndex = position308, tokenIndex308
					}
				l309:
					if !_rules[ruleSymbolOperator]() {
						goto l306
					}
					{
						position310, tokenIndex310 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l310
						}
						goto l311
					l310:
						position, tokenIndex = position310, tokenIndex310
					}
				l311:
					if !_rules[ruleSymbolExpr]() {
						goto l306
					}
					goto l307
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
			l307:
				add(ruleSymbolExpr, position305)
			}
			memoize(16, position304, tokenIndex304, true)
			return true
		l304:
			memoize(16, position304, tokenIndex304, false)
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 17 SymbolAtom <- <(LocalLabelRef / Offset / SymbolType / (LocalSymbol TCMarker?) / (SymbolName Offset) / (SymbolName TCMarker?) / Dot / (OpenParen WS? SymbolExpr WS? CloseParen))> */
		func() bool {
			if memoized, ok := memoization[memoKey{17, position}]; ok {
				return memoizedResult(memoized)
			}
			position312, tokenIndex312 := position, tokenIndex
			{
				position313 := position
				{
					position314, tokenIndex314 := position, tokenIndex
					if !_rules[ruleLocalLabelRef]() {
						goto l315
					}
					goto l314
				l315:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleOffset]() {
						goto l316
					}
					goto l314
				l316:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSymbolType]() {
						goto l317
					}
					goto l314
				l317:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleLocalSymbol]() {
						goto l318
					}
					{
						position319, tokenIndex319 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l319
						}
						goto l320
					l319:
						position, tokenIndex = position319, tokenIndex319
					}
				l320:
					goto l314
				l318:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSymbolName]() {
						goto l321
					}
					if !_rules[ruleOffset]() {
						goto l321
					}
					goto l314
				l321:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSymbolName]() {
						goto l322
					}
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l323
						}
						goto l324
					l323:
						position, tokenIndex = position323, tokenIndex323
					}
				l324:
					goto l314
				l322:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleDot]() {
						goto l325
					}
					goto l314
				l325:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleOpenParen]() {
						goto l312
					}
					{
						position326, tokenIndex326 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l326
						}
						goto l327
					l326:
						position, tokenIndex = position326, tokenIndex326
					}
				l327:
					if !_rules[ruleSymbolExpr]() {
						goto l312
					}
					{
						position328, tokenIndex328 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l328
						}
						goto l329
					l328:
						position, tokenIndex = position328, tokenIndex328
					}
				l329:
					if !_rules[ruleCloseParen]() {
						goto l312
					}
				}
			l314:
				add(ruleSymbolAtom, position313)
			}
			memoize(17, position312, tokenIndex312, true)
			return true
		l312:
			memoize(17, position312, tokenIndex312, false)
			position, tokenIndex = position312, tokenIndex312
			return false
		},
		/* 18 SymbolOperator <- <('+' / '-' / '|' / ('<' '<') / ('>' '>'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{18, position}]; ok {
				return memoizedResult(memoized)
			}
			position330, tokenIndex330 := position, tokenIndex
			{
				position331 := position
				{
					position332, tokenIndex332 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l333
					}
					position++
					goto l332
				l333:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('-') {
						goto l334
					}
					position++
					goto l332
				l334:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('|') {
						goto l335
					}
					position++
					goto l332
				l335:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('<') {
						goto l336
					}
					position++
					if buffer[position] != rune('<') {
						goto l336
					}
					position++
					goto l332
				l336:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('>') {
						goto l330
					}
					position++
					if buffer[position] != rune('>') {
						goto l330
					}
					position++
				}
			l332:
				add(ruleSymbolOperator, position331)
			}
			memoize(18, position330, tokenIndex330, true)
			return true
		l330:
			memoize(18, position330, tokenIndex330, false)
			position, tokenIndex = position330, tokenIndex330
			return false
		},
		/* 19 OpenParen <- <'('> */
		func() bool {
			if memoized, ok := memoization[memoKey{19, position}]; ok {
				return memoizedResult(memoized)
			}
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				if buffer[position] != rune('(') {
					goto l337
				}
				position++
				add(ruleOpenParen, position338)
			}
			memoize(19, position337, tokenIndex337, true)
			return true
		l337:
			memoize(19, position337, tokenIndex337, false)
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 20 CloseParen <- <')'> */
		func() bool {
			if memoized, ok := memoization[memoKey{20, position}]; ok {
				return memoizedResult(memoized)
			}
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if buffer[position] != rune(')') {
					goto l339
				}
				position++
				add(ruleCloseParen, position340)
			}
			memoize(20, position339, tokenIndex339, true)
			return true
		l339:
			memoize(20, position339, tokenIndex339, false)
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 21 SymbolType <- <(('@' / '%') (('f' 'u' 'n' 'c' 't' 'i' 'o' 'n') / ('o' 'b' 'j' 'e' 'c' 't')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{21, position}]; ok {
				return memoizedResult(memoized)
			}
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				{
					position343, tokenIndex343 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l344
					}
					position++
					goto l343
				l344:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('%') {
						goto l341
					}
					position++
				}
			l343:
				{
					position345, tokenIndex345 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l346
					}
					position++
					if buffer[position] != rune('u') {
						goto l346
					}
					position++
					if buffer[position] != rune('n') {
						goto l346
					}
					position++
					if buffer[position] != rune('c') {
						goto l346
					}
					position++
					if buffer[position] != rune('t') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('o') {
						goto l346
					}
					position++
					if buffer[position] != rune('n') {
						goto l346
					}
					position++
					goto l345
				l346:
					position, tokenIndex = position345, tokenIndex345
					if buffer[position] != rune('o') {
						goto l341
					}
					position++
					if buffer[position] != rune('b') {
						goto l341
					}
					position++
					if buffer[position] != rune('j') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('c') {
						goto l341
					}
					position++
					if buffer[position] != rune('t') {
						goto l341
					}
					position++
				}
			l345:
				add(ruleSymbolType, position342)
			}
			memoize(21, position341, tokenIndex341, true)
			return true
		l341:
			memoize(21, position341, tokenIndex341, false)
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 22 Dot <- <'.'> */
		func() bool {
			if memoized, ok := memoization[memoKey{22, position}]; ok {
				return memoizedResult(memoized)
			}
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				if buffer[position] != rune('.') {
					goto l347
				}
				position++
				add(ruleDot, position348)
			}
			memoize(22, position347, tokenIndex347, true)
			return true
		l347:
			memoize(22, position347, tokenIndex347, false)
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 23 TCMarker <- <('[' 'T' 'C' ']')> */
		func() bool {
			if memoized, ok := memoization[memoKey{23, position}]; ok {
				return memoizedResult(memoized)
			}
			position349, tokenIndex349 := position, tokenIndex
			{
				position350 := position
				if buffer[position] != rune('[') {
					goto l349
				}
				position++
				if buffer[position] != rune('T') {
					goto l349
				}
				position++
				if buffer[position] != rune('C') {
					goto l349
				}
				position++
				if buffer[position] != rune(']') {
					goto l349
				}
				position++
				add(ruleTCMarker, position350)
			}
			memoize(23, position349, tokenIndex349, true)
			return true
		l349:
			memoize(23, position349, tokenIndex349, false)
			position, tokenIndex = position349, tokenIndex349
			return false
		},
		/* 24 EscapedChar <- <('\\' .)> */
		func() bool {
			if memoized, ok := memoization[memoKey{24, position}]; ok {
				return memoizedResult(memoized)
			}
			position351, tokenIndex351 := position, tokenIndex
			{
				position352 := position
				if buffer[position] != rune('\\') {
					goto l351
				}
				position++
				if !matchDot() {
					goto l351
				}
				add(ruleEscapedChar, position352)
			}
			memoize(24, position351, tokenIndex351, true)
			return true
		l351:
			memoize(24, position351, tokenIndex351, false)
			position, tokenIndex = position351, tokenIndex351
			return false
		},
		/* 25 WS <- <(' ' / '\t')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{25, position}]; ok {
				return memoizedResult(memoized)
			}
			position353, tokenIndex353 := position, tokenIndex
			{
				position354 := position
				{
					position357, tokenIndex357 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l358
					}
					position++
					goto l357
				l358:
					position, tokenIndex = position357, tokenIndex357
					if buffer[position] != rune('\t') {
						goto l353
					}
					position++
				}
			l357:
			l355:
				{
					position356, tokenIndex356 := position, tokenIndex
					{
						position359, tokenIndex359 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if buffer[position] != rune('\t') {
							goto l356
						}
						position++
					}
				l359:
					goto l355
				l356:
					position, tokenIndex = position356, tokenIndex356
				}
				add(ruleWS, position354)
			}
			memoize(25, position353, tokenIndex353, true)
			return true
		l353:
			memoize(25, position353, tokenIndex353, false)
			position, tokenIndex = position353, tokenIndex353
			return false
		},
		/* 26 Comment <- <((('/' '/') / '#') (!'\n' .)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{26, position}]; ok {
				return memoizedResult(memoized)
			}
			position361, tokenIndex361 := position, tokenIndex
			{
				position362 := position
				{
					position363, tokenIndex363 := position, tokenIndex
					if buffer[position] != rune('/') {
						goto l364
					}
					position++
					if buffer[position] != rune('/') {
						goto l364
					}
					position++
					goto l363
				l364:
					position, tokenIndex = position363, tokenIndex363
					if buffer[position] != rune('#') {
						goto l361
					}
					position++
				}
			l363:
			l365:
				{
					position366, tokenIndex366 := position, tokenIndex
					{
						position367, tokenIndex367 := position, tokenIndex
						if buffer[position] != rune('\n') {
							goto l367
						}
						position++
						goto l366
					l367:
						position, tokenIndex = position367, tokenIndex367
					}
					if !matchDot() {
						goto l366
					}
					goto l365
				l366:
					position, tokenIndex = position366, tokenIndex366
				}
				add(ruleComment, position362)
			}
			memoize(26, position361, tokenIndex361, true)
			return true
		l361:
			memoize(26, position361, tokenIndex361, false)
			position, tokenIndex = position361, tokenIndex361
			return false
		},
		/* 27 Label <- <((LocalSymbol / LocalLabel / SymbolName) ':')> */
		func() bool {
			if memoized, ok := memoization[memoKey{27, position}]; ok {
				return memoizedResult(memoized)
			}
			position368, tokenIndex368 := position, tokenIndex
			{
				position369 := position
				{
					position370, tokenIndex370 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l371
					}
					goto l370
				l371:
					position, tokenIndex = position370, tokenIndex370
					if !_rules[ruleLocalLabel]() {
						goto l372
					}
					goto l370
				l372:
					position, tokenIndex = position370, tokenIndex370
					if !_rules[ruleSymbolName]() {
						goto l368
					}
				}
			l370:
				if buffer[position] != rune(':') {
					goto l368
				}
				position++
				add(ruleLabel, position369)
			}
			memoize(27, position368, tokenIndex368, true)
			return true
		l368:
			memoize(27, position368, tokenIndex368, false)
			position, tokenIndex = position368, tokenIndex368
			return false
		},
		/* 28 SymbolName <- <(([a-z] / [A-Z] / '.' / '_') ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]) / '$' / '_')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{28, position}]; ok {
				return memoizedResult(memoized)
			}
			position373, tokenIndex373 := position, tokenIndex
			{
				position374 := position
				{
					position375, tokenIndex375 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l376
					}
					position++
					goto l375
				l376:
					position, tokenIndex = position375, tokenIndex375
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l377
					}
					position++
					goto l375
				l377:
					position, tokenIndex = position375, tokenIndex375
					if buffer[position] != rune('.') {
						goto l378
					}
					position++
					goto l375
				l378:
					position, tokenIndex = position375, tokenIndex375
					if buffer[position] != rune('_') {
						goto l373
					}
					position++
				}
			l375:
			l379:
				{
					position380, tokenIndex380 := position, tokenIndex
					{
						position381, tokenIndex381 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l382
						}
						position++
						goto l381
					l382:
						position, tokenIndex = position381, tokenIndex381
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l383
						}
						position++
						goto l381
					l383:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('.') {
							goto l384
						}
						position++
						goto l381
					l384:
						position, tokenIndex = position381, tokenIndex381
						{
							position386, tokenIndex386 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l387
							}
							position++
							goto l386
						l387:
							position, tokenIndex = position386, tokenIndex386
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l385
							}
							position++
						}
					l386:
						goto l381
					l385:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('$') {
							goto l388
						}
						position++
						goto l381
					l388:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('_') {
							goto l380
						}
						position++
					}
				l381:
					goto l379
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
				add(ruleSymbolName, position374)
			}
			memoize(28, position373, tokenIndex373, true)
			return true
		l373:
			memoize(28, position373, tokenIndex373, false)
			position, tokenIndex = position373, tokenIndex373
			return false
		},
		/* 29 LocalSymbol <- <('.' 'L' ([a-z] / [A-Z] / ([a-z] / [A-Z]) / '.' / ([0-9] / [0-9]) / '$' / '_')+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{29, position}]; ok {
				return memoizedResult(memoized)
			}
			position389, tokenIndex389 := position, tokenIndex
			{
				position390 := position
				if buffer[position] != rune('.') {
					goto l389
				}
				position++
				if buffer[position] != rune('L') {
					goto l389
				}
				position++
				{
					position393, tokenIndex393 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l394
					}
					position++
					goto l393
				l394:
					position, tokenIndex = position393, tokenIndex393
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l395
					}
					position++
					goto l393
				l395:
					position, tokenIndex = position393, tokenIndex393
					{
						position397, tokenIndex397 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l398
						}
						position++
						goto l397
					l398:
						position, tokenIndex = position397, tokenIndex397
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l396
						}
						position++
					}
				l397:
					goto l393
				l396:
					position, tokenIndex = position393, tokenIndex393
					if buffer[position] != rune('.') {
						goto l399
					}
					position++
					goto l393
				l399:
					position, tokenIndex = position393, tokenIndex393
					{
						position401, tokenIndex401 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l402
						}
						position++
						goto l401
					l402:
						position, tokenIndex = position401, tokenIndex401
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l400
						}
						position++
					}
				l401:
					goto l393
				l400:
					position, tokenIndex = position393, tokenIndex393
					if buffer[position] != rune('$') {
						goto l403
					}
					position++
					goto l393
				l403:
					position, tokenIndex = position393, tokenIndex393
					if buffer[position] != rune('_') {
						goto l389
					}
					position++
				}
			l393:
			l391:
				{
					position392, tokenIndex392 := position, tokenIndex
					{
						position404, tokenIndex404 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l405
						}
						position++
						goto l404
					l405:
						position, tokenIndex = position404, tokenIndex404
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l406
						}
						position++
						goto l404
					l406:
						position, tokenIndex = position404, tokenIndex404
						{
							position408, tokenIndex408 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l409
							}
							position++
							goto l408
						l409:
							position, tokenIndex = position408, tokenIndex408
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l407
							}
							position++
						}
					l408:
						goto l404
					l407:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('.') {
							goto l410
						}
						position++
						goto l404
					l410:
						position, tokenIndex = position404, tokenIndex404
						{
							position412, tokenIndex412 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l413
							}
							position++
							goto l412
						l413:
							position, tokenIndex = position412, tokenIndex412
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l411
							}
							position++
						}
					l412:
						goto l404
					l411:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('$') {
							goto l414
						}
						position++
						goto l404
					l414:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('_') {
							goto l392
						}
						position++
					}
				l404:
					goto l391
				l392:
					position, tokenIndex = position392, tokenIndex392
				}
				add(ruleLocalSymbol, position390)
			}
			memoize(29, position389, tokenIndex389, true)
			return true
		l389:
			memoize(29, position389, tokenIndex389, false)
			position, tokenIndex = position389, tokenIndex389
			return false
		},
		/* 30 LocalLabel <- <([0-9] ([0-9] / '$')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{30, position}]; ok {
				return memoizedResult(memoized)
			}
			position415, tokenIndex415 := position, tokenIndex
			{
				position416 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l415
				}
				position++
			l417:
				{
					position418, tokenIndex418 := position, tokenIndex
					{
						position419, tokenIndex419 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l420
						}
						position++
						goto l419
					l420:
						position, tokenIndex = position419, tokenIndex419
						if buffer[position] != rune('$') {
							goto l418
						}
						position++
					}
				l419:
					goto l417
				l418:
					position, tokenIndex = position418, tokenIndex418
				}
				add(ruleLocalLabel, position416)
			}
			memoize(30, position415, tokenIndex415, true)
			return true
		l415:
			memoize(30, position415, tokenIndex415, false)
			position, tokenIndex = position415, tokenIndex415
			return false
		},
		/* 31 LocalLabelRef <- <([0-9] ([0-9] / '$')* ('b' / 'f'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{31, position}]; ok {
				return memoizedResult(memoized)
			}
			position421, tokenIndex421 := position, tokenIndex
			{
				position422 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l421
				}
				position++
			l423:
				{
					position424, tokenIndex424 := position, tokenIndex
					{
						position425, tokenIndex425 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l426
						}
						position++
						goto l425
					l426:
						position, tokenIndex = position425, tokenIndex425
						if buffer[position] != rune('$') {
							goto l424
						}
						position++
					}
				l425:
					goto l423
				l424:
					position, tokenIndex = position424, tokenIndex424
				}
				{
					position427, tokenIndex427 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l428
					}
					position++
					goto l427
				l428:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('f') {
						goto l421
					}
					position++
				}
			l427:
				add(ruleLocalLabelRef, position422)
			}
			memoize(31, position421, tokenIndex421, true)
			return true
		l421:
			memoize(31, position421, tokenIndex421, false)
			position, tokenIndex = position421, tokenIndex421
			return false
		},
		/* 32 Instruction <- <(InstructionName (WS InstructionArg (WS? ','? WS? InstructionArg)*)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{32, position}]; ok {
				return memoizedResult(memoized)
			}
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				if !_rules[ruleInstructionName]() {
					goto l429
				}
			l431:
				{
					position432, tokenIndex432 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l432
					}
					if !_rules[ruleInstructionArg]() {
						goto l432
					}
				l433:
					{
						position434, tokenIndex434 := position, tokenIndex
						{
							position435, tokenIndex435 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l435
							}
							goto l436
						l435:
							position, tokenIndex = position435, tokenIndex435
						}
					l436:
						{
							position437, tokenIndex437 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l437
							}
							position++
							goto l438
						l437:
							position, tokenIndex = position437, tokenIndex437
						}
					l438:
						{
							position439, tokenIndex439 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l439
							}
							goto l440
						l439:
							position, tokenIndex = position439, tokenIndex439
						}
					l440:
						if !_rules[ruleInstructionArg]() {
							goto l434
						}
						goto l433
					l434:
						position, tokenIndex = position434, tokenIndex434
					}
					goto l431
				l432:
					position, tokenIndex = position432, tokenIndex432
				}
				add(ruleInstruction, position430)
			}
			memoize(32, position429, tokenIndex429, true)
			return true
		l429:
			memoize(32, position429, tokenIndex429, false)
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 33 InstructionName <- <(([a-z] / [A-Z]) ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]))* ('.' / '+' / '-')?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{33, position}]; ok {
				return memoizedResult(memoized)
			}
			position441, tokenIndex441 := position, tokenIndex
			{
				position442 := position
				{
					position443, tokenIndex443 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l444
					}
					position++
					goto l443
				l444:
					position, tokenIndex = position443, tokenIndex443
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l441
					}
					position++
				}
			l443:
			l445:
				{
					position446, tokenIndex446 := position, tokenIndex
					{
						position447, tokenIndex447 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l448
						}
						position++
						goto l447
					l448:
						position, tokenIndex = position447, tokenIndex447
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l449
						}
						position++
						goto l447
					l449:
						position, tokenIndex = position447, tokenIndex447
						if buffer[position] != rune('.') {
							goto l450
						}
						position++
						goto l447
					l450:
						position, tokenIndex = position447, tokenIndex447
						{
							position451, tokenIndex451 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l452
							}
							position++
							goto l451
						l452:
							position, tokenIndex = position451, tokenIndex451
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l446
							}
							position++
						}
					l451:
					}
				l447:
					goto l445
				l446:
					position, tokenIndex = position446, tokenIndex446
				}
				{
					position453, tokenIndex453 := position, tokenIndex
					{
						position455, tokenIndex455 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l456
						}
						position++
						goto l455
					l456:
						position, tokenIndex = position455, tokenIndex455
						if buffer[position] != rune('+') {
							goto l457
						}
						position++
						goto l455
					l457:
						position, tokenIndex = position455, tokenIndex455
						if buffer[position] != rune('-') {
							goto l453
						}
						position++
					}
				l455:
					goto l454
				l453:
					position, tokenIndex = position453, tokenIndex453
				}
			l454:
				add(ruleInstructionName, position442)
			}
			memoize(33, position441, tokenIndex441, true)
			return true
		l441:
			memoize(33, position441, tokenIndex441, false)
			position, tokenIndex = position441, tokenIndex441
			return false
		},
		/* 34 InstructionArg <- <(IndirectionIndicator? (ARMConstantTweak / RegisterOrConstant / LocalLabelRef / TOCRefHigh / TOCRefLow / GOTLocation / GOTSymbolOffset / MemoryRef / AVX512Token))> */
		func() bool {
			if memoized, ok := memoization[memoKey{34, position}]; ok {
				return memoizedResult(memoized)
			}
			position458, tokenIndex458 := position, tokenIndex
			{
				position459 := position
				{
					position460, tokenIndex460 := position, tokenIndex
					if !_rules[ruleIndirectionIndicator]() {
						goto l460
					}
					goto l461
				l460:
					position, tokenIndex = position460, tokenIndex460
				}
			l461:
				{
					position462, tokenIndex462 := position, tokenIndex
					if !_rules[ruleARMConstantTweak]() {
						goto l463
					}
					goto l462
				l463:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleRegisterOrConstant]() {
						goto l464
					}
					goto l462
				l464:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleLocalLabelRef]() {
						goto l465
					}
					goto l462
				l465:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleTOCRefHigh]() {
						goto l466
					}
					goto l462
				l466:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleTOCRefLow]() {
						goto l467
					}
					goto l462
				l467:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleGOTLocation]() {
						goto l468
					}
					goto l462
				l468:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleGOTSymbolOffset]() {
						goto l469
					}
					goto l462
				l469:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleMemoryRef]() {
						goto l470
					}
					goto l462
				l470:
					position, tokenIndex = position462, tokenIndex462
					if !_rules[ruleAVX512Token]() {
						goto l458
					}
				}
			l462:
				add(ruleInstructionArg, position459)
			}
			memoize(34, position458, tokenIndex458, true)
			return true
		l458:
			memoize(34, position458, tokenIndex458, false)
			position, tokenIndex = position458, tokenIndex458
			return false
		},
		/* 35 GOTLocation <- <('$' '_' 'G' 'L' 'O' 'B' 'A' 'L' '_' 'O' 'F' 'F' 'S' 'E' 'T' '_' 'T' 'A' 'B' 'L' 'E' '_' '-' LocalSymbol)> */
		func() bool {
			if memoized, ok := memoization[memoKey{35, position}]; ok {
				return memoizedResult(memoized)
			}
			position471, tokenIndex471 := position, tokenIndex
			{
				position472 := position
				if buffer[position] != rune('$') {
					goto l471
				}
				position++
				if buffer[position] != rune('_') {
					goto l471
				}
				position++
				if buffer[position] != rune('G') {
					goto l471
				}
				position++
				if buffer[position] != rune('L') {
					goto l471
				}
				position++
				if buffer[position] != rune('O') {
					goto l471
				}
				position++
				if buffer[position] != rune('B') {
					goto l471
				}
				position++
				if buffer[position] != rune('A') {
					goto l471
				}
				position++
				if buffer[position] != rune('L') {
					goto l471
				}
				position++
				if buffer[position] != rune('_') {
					goto l471
				}
				position++
				if buffer[position] != rune('O') {
					goto l471
				}
				position++
				if buffer[position] != rune('F') {
					goto l471
				}
				position++
				if buffer[position] != rune('F') {
					goto l471
				}
				position++
				if buffer[position] != rune('S') {
					goto l471
				}
				position++
				if buffer[position] != rune('E') {
					goto l471
				}
				position++
				if buffer[position] != rune('T') {
					goto l471
				}
				position++
				if buffer[position] != rune('_') {
					goto l471
				}
				position++
				if buffer[position] != rune('T') {
					goto l471
				}
				position++
				if buffer[position] != rune('A') {
					goto l471
				}
				position++
				if buffer[position] != rune('B') {
					goto l471
				}
				position++
				if buffer[position] != rune('L') {
					goto l471
				}
				position++
				if buffer[position] != rune('E') {
					goto l471
				}
				position++
				if buffer[position] != rune('_') {
					goto l471
				}
				position++
				if buffer[position] != rune('-') {
					goto l471
				}
				position++
				if !_rules[ruleLocalSymbol]() {
					goto l471
				}
				add(ruleGOTLocation, position472)
			}
			memoize(35, position471, tokenIndex471, true)
			return true
		l471:
			memoize(35, position471, tokenIndex471, false)
			position, tokenIndex = position471, tokenIndex471
			return false
		},
		/* 36 GOTSymbolOffset <- <(('$' SymbolName ('@' 'G' 'O' 'T') ('O' 'F' 'F')?) / (':' ('g' / 'G') ('o' / 'O') ('t' / 'T') ':' SymbolName))> */
		func() bool {
			if memoized, ok := memoization[memoKey{36, position}]; ok {
				return memoizedResult(memoized)
			}
			position473, tokenIndex473 := position, tokenIndex
			{
				position474 := position
				{
					position475, tokenIndex475 := position, tokenIndex
					if buffer[position] != rune('$') {
						goto l476
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l476
					}
					if buffer[position] != rune('@') {
						goto l476
					}
					position++
					if buffer[position] != rune('G') {
						goto l476
					}
					position++
					if buffer[position] != rune('O') {
						goto l476
					}
					position++
					if buffer[position] != rune('T') {
						goto l476
					}
					position++
					{
						position477, tokenIndex477 := position, tokenIndex
						if buffer[position] != rune('O') {
							goto l477
						}
						position++
						if buffer[position] != rune('F') {
							goto l477
						}
						position++
						if buffer[position] != rune('F') {
							goto l477
						}
						position++
						goto l478
					l477:
						position, tokenIndex = position477, tokenIndex477
					}
				l478:
					goto l475
				l476:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune(':') {
						goto l473
					}
					position++
					{
						position479, tokenIndex479 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l480
						}
						position++
						goto l479
					l480:
						position, tokenIndex = position479, tokenIndex479
						if buffer[position] != rune('G') {
							goto l473
						}
						position++
					}
				l479:
					{
						position481, tokenIndex481 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l482
						}
						position++
						goto l481
					l482:
						position, tokenIndex = position481, tokenIndex481
						if buffer[position] != rune('O') {
							goto l473
						}
						position++
					}
				l481:
					{
						position483, tokenIndex483 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l484
						}
						position++
						goto l483
					l484:
						position, tokenIndex = position483, tokenIndex483
						if buffer[position] != rune('T') {
							goto l473
						}
						position++
					}
				l483:
					if buffer[position] != rune(':') {
						goto l473
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l473
					}
				}
			l475:
				add(ruleGOTSymbolOffset, position474)
			}
			memoize(36, position473, tokenIndex473, true)
			return true
		l473:
			memoize(36, position473, tokenIndex473, false)
			position, tokenIndex = position473, tokenIndex473
			return false
		},
		/* 37 AVX512Token <- <(WS? '{' '%'? ([0-9] / [a-z])* '}')> */
		func() bool {
			if memoized, ok := memoization[memoKey{37, position}]; ok {
				return memoizedResult(memoized)
			}
			position485, tokenIndex485 := position, tokenIndex
			{
				position486 := position
				{
					position487, tokenIndex487 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l487
					}
					goto l488
				l487:
					position, tokenIndex = position487, tokenIndex487
				}
			l488:
				if buffer[position] != rune('{') {
					goto l485
				}
				position++
				{
					position489, tokenIndex489 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l489
					}
					position++
					goto l490
				l489:
					position, tokenIndex = position489, tokenIndex489
				}
			l490:
			l491:
				{
					position492, tokenIndex492 := position, tokenIndex
					{
						position493, tokenIndex493 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l494
						}
						position++
						goto l493
					l494:
						position, tokenIndex = position493, tokenIndex493
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l492
						}
						position++
					}
				l493:
					goto l491
				l492:
					position, tokenIndex = position492, tokenIndex492
				}
				if buffer[position] != rune('}') {
					goto l485
				}
				position++
				add(ruleAVX512Token, position486)
			}
			memoize(37, position485, tokenIndex485, true)
			return true
		l485:
			memoize(37, position485, tokenIndex485, false)
			position, tokenIndex = position485, tokenIndex485
			return false
		},
		/* 38 TOCRefHigh <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('h' / 'H') ('a' / 'A')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{38, position}]; ok {
				return memoizedResult(memoized)
			}
			position495, tokenIndex495 := position, tokenIndex
			{
				position496 := position
				if buffer[position] != rune('.') {
					goto l495
				}
				position++
				if buffer[position] != rune('T') {
					goto l495
				}
				position++
				if buffer[position] != rune('O') {
					goto l495
				}
				position++
				if buffer[position] != rune('C') {
					goto l495
				}
				position++
				if buffer[position] != rune('.') {
					goto l495
				}
				position++
				if buffer[position] != rune('-') {
					goto l495
				}
				position++
				{
					position497, tokenIndex497 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l498
					}
					position++
					if buffer[position] != rune('b') {
						goto l498
					}
					position++
					goto l497
				l498:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('.') {
						goto l495
					}
					position++
					if buffer[position] != rune('L') {
						goto l495
					}
					position++
					{
						position501, tokenIndex501 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l502
						}
						position++
						goto l501
					l502:
						position, tokenIndex = position501, tokenIndex501
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l503
						}
						position++
						goto l501
					l503:
						position, tokenIndex = position501, tokenIndex501
						if buffer[position] != rune('_') {
							goto l504
						}
						position++
						goto l501
					l504:
						position, tokenIndex = position501, tokenIndex501
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l495
						}
						position++
					}
				l501:
				l499:
					{
						position500, tokenIndex500 := position, tokenIndex
						{
							position505, tokenIndex505 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l506
							}
							position++
							goto l505
						l506:
							position, tokenIndex = position505, tokenIndex505
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l507
							}
							position++
							goto l505
						l507:
							position, tokenIndex = position505, tokenIndex505
							if buffer[position] != rune('_') {
								goto l508
							}
							position++
							goto l505
						l508:
							position, tokenIndex = position505, tokenIndex505
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l500
							}
							position++
						}
					l505:
						goto l499
					l500:
						position, tokenIndex = position500, tokenIndex500
					}
				}
			l497:
				if buffer[position] != rune('@') {
					goto l495
				}
				position++
				{
					position509, tokenIndex509 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l510
					}
					position++
					goto l509
				l510:
					position, tokenIndex = position509, tokenIndex509
					if buffer[position] != rune('H') {
						goto l495
					}
					position++
				}
			l509:
				{
					position511, tokenIndex511 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l512
					}
					position++
					goto l511
				l512:
					position, tokenIndex = position511, tokenIndex511
					if buffer[position] != rune('A') {
						goto l495
					}
					position++
				}
			l511:
				add(ruleTOCRefHigh, position496)
			}
			memoize(38, position495, tokenIndex495, true)
			return true
		l495:
			memoize(38, position495, tokenIndex495, false)
			position, tokenIndex = position495, tokenIndex495
			return false
		},
		/* 39 TOCRefLow <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('l' / 'L')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{39, position}]; ok {
				return memoizedResult(memoized)
			}
			position513, tokenIndex513 := position, tokenIndex
			{
				position514 := position
				if buffer[position] != rune('.') {
					goto l513
				}
				position++
				if buffer[position] != rune('T') {
					goto l513
				}
				position++
				if buffer[position] != rune('O') {
					goto l513
				}
				position++
				if buffer[position] != rune('C') {
					goto l513
				}
				position++
				if buffer[position] != rune('.') {
					goto l513
				}
				position++
				if buffer[position] != rune('-') {
					goto l513
				}
				position++
				{
					position515, tokenIndex515 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l516
					}
					position++
					if buffer[position] != rune('b') {
						goto l516
					}
					position++
					goto l515
				l516:
					position, tokenIndex = position515, tokenIndex515
					if buffer[position] != rune('.') {
						goto l513
					}
					position++
					if buffer[position] != rune('L') {
						goto l513
					}
					position++
					{
						position519, tokenIndex519 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l520
						}
						position++
						goto l519
					l520:
						position, tokenIndex = position519, tokenIndex519
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l521
						}
						position++
						goto l519
					l521:
						position, tokenIndex = position519, tokenIndex519
						if buffer[position] != rune('_') {
							goto l522
						}
						position++
						goto l519
					l522:
						position, tokenIndex = position519, tokenIndex519
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l513
						}
						position++
					}
				l519:
				l517:
					{
						position518, tokenIndex518 := position, tokenIndex
						{
							position523, tokenIndex523 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l524
							}
							position++
							goto l523
						l524:
							position, tokenIndex = position523, tokenIndex523
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l525
							}
							position++
							goto l523
						l525:
							position, tokenIndex = position523, tokenIndex523
							if buffer[position] != rune('_') {
								goto l526
							}
							position++
							goto l523
						l526:
							position, tokenIndex = position523, tokenIndex523
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l518
							}
							position++
						}
					l523:
						goto l517
					l518:
						position, tokenIndex = position518, tokenIndex518
					}
				}
			l515:
				if buffer[position] != rune('@') {
					goto l513
				}
				position++
				{
					position527, tokenIndex527 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l528
					}
					position++
					goto l527
				l528:
					position, tokenIndex = position527, tokenIndex527
					if buffer[position] != rune('L') {
						goto l513
					}
					position++
				}
			l527:
				add(ruleTOCRefLow, position514)
			}
			memoize(39, position513, tokenIndex513, true)
			return true
		l513:
			memoize(39, position513, tokenIndex513, false)
			position, tokenIndex = position513, tokenIndex513
			return false
		},
		/* 40 IndirectionIndicator <- <'*'> */
		func() bool {
			if memoized, ok := memoization[memoKey{40, position}]; ok {
				return memoizedResult(memoized)
			}
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if buffer[position] != rune('*') {
					goto l529
				}
				position++
				add(ruleIndirectionIndicator, position530)
			}
			memoize(40, position529, tokenIndex529, true)
			return true
		l529:
			memoize(40, position529, tokenIndex529, false)
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 41 RegisterOrConstant <- <((('%' ([a-z] / [A-Z]) ([a-z] / [A-Z] / ([0-9] / [0-9]))*) / ('$'? ((Offset Offset) / Offset)) / ('#' Offset ('*' [0-9]+ ('-' [0-9] [0-9]*)?)?) / ('#' '~'? '(' [0-9] WS? ('<' '<') WS? [0-9] ')') / ARMRegister) !('f' / 'b' / ':' / '(' / '+' / '-'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{41, position}]; ok {
				return memoizedResult(memoized)
			}
			position531, tokenIndex531 := position, tokenIndex
			{
				position532 := position
				{
					position533, tokenIndex533 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l534
					}
					position++
					{
						position535, tokenIndex535 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l536
						}
						position++
						goto l535
					l536:
						position, tokenIndex = position535, tokenIndex535
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l534
						}
						position++
					}
				l535:
				l537:
					{
						position538, tokenIndex538 := position, tokenIndex
						{
							position539, tokenIndex539 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l540
							}
							position++
							goto l539
						l540:
							position, tokenIndex = position539, tokenIndex539
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l541
							}
							position++
							goto l539
						l541:
							position, tokenIndex = position539, tokenIndex539
							{
								position542, tokenIndex542 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l543
								}
								position++
								goto l542
							l543:
								position, tokenIndex = position542, tokenIndex542
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l538
								}
								position++
							}
						l542:
						}
					l539:
						goto l537
					l538:
						position, tokenIndex = position538, tokenIndex538
					}
					goto l533
				l534:
					position, tokenIndex = position533, tokenIndex533
					{
						position545, tokenIndex545 := position, tokenIndex
						if buffer[position] != rune('$') {
							goto l545
						}
						position++
						goto l546
					l545:
						position, tokenIndex = position545, tokenIndex545
					}
				l546:
					{
						position547, tokenIndex547 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l548
						}
						if !_rules[ruleOffset]() {
							goto l548
						}
						goto l547
					l548:
						position, tokenIndex = position547, tokenIndex547
						if !_rules[ruleOffset]() {
							goto l544
						}
					}
				l547:
					goto l533
				l544:
					position, tokenIndex = position533, tokenIndex533
					if buffer[position] != rune('#') {
						goto l549
					}
					position++
					if !_rules[ruleOffset]() {
						goto l549
					}
					{
						position550, tokenIndex550 := position, tokenIndex
						if buffer[position] != rune('*') {
							goto l550
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l550
						}
						position++
					l552:
						{
							position553, tokenIndex553 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l553
							}
							position++
							goto l552
						l553:
							position, tokenIndex = position553, tokenIndex553
						}
						{
							position554, tokenIndex554 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l554
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l554
							}
							position++
						l556:
							{
								position557, tokenIndex557 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l557
								}
								position++
								goto l556
							l557:
								position, tokenIndex = position557, tokenIndex557
							}
							goto l555
						l554:
							position, tokenIndex = position554, tokenIndex554
						}
					l555:
						goto l551
					l550:
						position, tokenIndex = position550, tokenIndex550
					}
				l551:
					goto l533
				l549:
					position, tokenIndex = position533, tokenIndex533
					if buffer[position] != rune('#') {
						goto l558
					}
					position++
					{
						position559, tokenIndex559 := position, tokenIndex
						if buffer[position] != rune('~') {
							goto l559
						}
						position++
						goto l560
					l559:
						position, tokenIndex = position559, tokenIndex559
					}
				l560:
					if buffer[position] != rune('(') {
						goto l558
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l558
					}
					position++
					{
						position561, tokenIndex561 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l561
						}
						goto l562
					l561:
						position, tokenIndex = position561, tokenIndex561
					}
				l562:
					if buffer[position] != rune('<') {
						goto l558
					}
					position++
					if buffer[position] != rune('<') {
						goto l558
					}
					position++
					{
						position563, tokenIndex563 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l563
						}
						goto l564
					l563:
						position, tokenIndex = position563, tokenIndex563
					}
				l564:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l558
					}
					position++
					if buffer[position] != rune(')') {
						goto l558
					}
					position++
					goto l533
				l558:
					position, tokenIndex = position533, tokenIndex533
					if !_rules[ruleARMRegister]() {
						goto l531
					}
				}
			l533:
				{
					position565, tokenIndex565 := position, tokenIndex
					{
						position566, tokenIndex566 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l567
						}
						position++
						goto l566
					l567:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('b') {
							goto l568
						}
						position++
						goto l566
					l568:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune(':') {
							goto l569
						}
						position++
						goto l566
					l569:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('(') {
							goto l570
						}
						position++
						goto l566
					l570:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('+') {
							goto l571
						}
						position++
						goto l566
					l571:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('-') {
							goto l565
						}
						position++
					}
				l566:
					goto l531
				l565:
					position, tokenIndex = position565, tokenIndex565
				}
				add(ruleRegisterOrConstant, position532)
			}
			memoize(41, position531, tokenIndex531, true)
			return true
		l531:
			memoize(41, position531, tokenIndex531, false)
			position, tokenIndex = position531, tokenIndex531
			return false
		},
		/* 42 ARMConstantTweak <- <(((('u' / 's') (('x' / 'X') ('t' / 'T')) ('x' / 'w' / 'h' / 'b')) / (('l' / 'L') ('s' / 'S') ('l' / 'L')) / (('l' / 'L') ('s' / 'S') ('r' / 'R')) / (('r' / 'R') ('o' / 'O') ('r' / 'R')) / (('a' / 'A') ('s' / 'S') ('r' / 'R'))) (WS '#' Offset)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{42, position}]; ok {
				return memoizedResult(memoized)
			}
			position572, tokenIndex572 := position, tokenIndex
			{
				position573 := position
				{
					position574, tokenIndex574 := position, tokenIndex
					{
						position576, tokenIndex576 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l577
						}
						position++
						goto l576
					l577:
						position, tokenIndex = position576, tokenIndex576
						if buffer[position] != rune('s') {
							goto l575
						}
						position++
					}
				l576:
					{
						position578, tokenIndex578 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l579
						}
						position++
						goto l578
					l579:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('X') {
							goto l575
						}
						position++
					}
				l578:
					{
						position580, tokenIndex580 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l581
						}
						position++
						goto l580
					l581:
						position, tokenIndex = position580, tokenIndex580
						if buffer[position] != rune('T') {
							goto l575
						}
						position++
					}
				l580:
					{
						position582, tokenIndex582 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l583
						}
						position++
						goto l582
					l583:
						position, tokenIndex = position582, tokenIndex582
						if buffer[position] != rune('w') {
							goto l584
						}
						position++
						goto l582
					l584:
						position, tokenIndex = position582, tokenIndex582
						if buffer[position] != rune('h') {
							goto l585
						}
						position++
						goto l582
					l585:
						position, tokenIndex = position582, tokenIndex582
						if buffer[position] != rune('b') {
							goto l575
						}
						position++
					}
				l582:
					goto l574
				l575:
					position, tokenIndex = position574, tokenIndex574
					{
						position587, tokenIndex587 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l588
						}
						position++
						goto l587
					l588:
						position, tokenIndex = position587, tokenIndex587
						if buffer[position] != rune('L') {
							goto l586
						}
						position++
					}
				l587:
					{
						position589, tokenIndex589 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l590
						}
						position++
						goto l589
					l590:
						position, tokenIndex = position589, tokenIndex589
						if buffer[position] != rune('S') {
							goto l586
						}
						position++
					}
				l589:
					{
						position591, tokenIndex591 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l592
						}
						position++
						goto l591
					l592:
						position, tokenIndex = position591, tokenIndex591
						if buffer[position] != rune('L') {
							goto l586
						}
						position++
					}
				l591:
					goto l574
				l586:
					position, tokenIndex = position574, tokenIndex574
					{
						position594, tokenIndex594 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l595
						}
						position++
						goto l594
					l595:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('L') {
							goto l593
						}
						position++
					}
				l594:
					{
						position596, tokenIndex596 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l597
						}
						position++
						goto l596
					l597:
						position, tokenIndex = position596, tokenIndex596
						if buffer[position] != rune('S') {
							goto l593
						}
						position++
					}
				l596:
					{
						position598, tokenIndex598 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l599
						}
						position++
						goto l598
					l599:
						position, tokenIndex = position598, tokenIndex598
						if buffer[position] != rune('R') {
							goto l593
						}
						position++
					}
				l598:
					goto l574
				l593:
					position, tokenIndex = position574, tokenIndex574
					{
						position601, tokenIndex601 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l602
						}
						position++
						goto l601
					l602:
						position, tokenIndex = position601, tokenIndex601
						if buffer[position] != rune('R') {
							goto l600
						}
						position++
					}
				l601:
					{
						position603, tokenIndex603 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l604
						}
						position++
						goto l603
					l604:
						position, tokenIndex = position603, tokenIndex603
						if buffer[position] != rune('O') {
							goto l600
						}
						position++
					}
				l603:
					{
						position605, tokenIndex605 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l606
						}
						position++
						goto l605
					l606:
						position, tokenIndex = position605, tokenIndex605
						if buffer[position] != rune('R') {
							goto l600
						}
						position++
					}
				l605:
					goto l574
				l600:
					position, tokenIndex = position574, tokenIndex574
					{
						position607, tokenIndex607 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l608
						}
						position++
						goto l607
					l608:
						position, tokenIndex = position607, tokenIndex607
						if buffer[position] != rune('A') {
							goto l572
						}
						position++
					}
				l607:
					{
						position609, tokenIndex609 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l610
						}
						position++
						goto l609
					l610:
						position, tokenIndex = position609, tokenIndex609
						if buffer[position] != rune('S') {
							goto l572
						}
						position++
					}
				l609:
					{
						position611, tokenIndex611 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l612
						}
						position++
						goto l611
					l612:
						position, tokenIndex = position611, tokenIndex611
						if buffer[position] != rune('R') {
							goto l572
						}
						position++
					}
				l611:
				}
			l574:
				{
					position613, tokenIndex613 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l613
					}
					if buffer[position] != rune('#') {
						goto l613
					}
					position++
					if !_rules[ruleOffset]() {
						goto l613
					}
					goto l614
				l613:
					position, tokenIndex = position613, tokenIndex613
				}
			l614:
				add(ruleARMConstantTweak, position573)
			}
			memoize(42, position572, tokenIndex572, true)
			return true
		l572:
			memoize(42, position572, tokenIndex572, false)
			position, tokenIndex = position572, tokenIndex572
			return false
		},
		/* 43 ARMRegister <- <((('s' / 'S') ('p' / 'P')) / (('x' / 'w' / 'd' / 'q' / 's' / 'h' / 'b') [0-9] [0-9]?) / (('x' / 'X') ('z' / 'Z') ('r' / 'R')) / (('w' / 'W') ('z' / 'Z') ('r' / 'R')) / (('n' / 'N') ('z' / 'Z') ('c' / 'C') ('v' / 'V')) / ARMVectorRegister / ('{' WS? ARMVectorRegister (',' WS? ARMVectorRegister)* WS? '}' ('[' [0-9] [0-9]? ']')?))> */
		func() bool {
			if memoized, ok := memoization[memoKey{43, position}]; ok {
				return memoizedResult(memoized)
			}
			position615, tokenIndex615 := position, tokenIndex
			{
				position616 := position
				{
					position617, tokenIndex617 := position, tokenIndex
					{
						position619, tokenIndex619 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l620
						}
						position++
						goto l619
					l620:
						position, tokenIndex = position619, tokenIndex619
						if buffer[position] != rune('S') {
							goto l618
						}
						position++
					}
				l619:
					{
						position621, tokenIndex621 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l622
						}
						position++
						goto l621
					l622:
						position, tokenIndex = position621, tokenIndex621
						if buffer[position] != rune('P') {
							goto l618
						}
						position++
					}
				l621:
					goto l617
				l618:
					position, tokenIndex = position617, tokenIndex617
					{
						position624, tokenIndex624 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l625
						}
						position++
						goto l624
					l625:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('w') {
							goto l626
						}
						position++
						goto l624
					l626:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('d') {
							goto l627
						}
						position++
						goto l624
					l627:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('q') {
							goto l628
						}
						position++
						goto l624
					l628:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('s') {
							goto l629
						}
						position++
						goto l624
					l629:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('h') {
							goto l630
						}
						position++
						goto l624
					l630:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('b') {
							goto l623
						}
						position++
					}
				l624:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l623
					}
					position++
					{
						position631, tokenIndex631 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l631
						}
						position++
						goto l632
					l631:
						position, tokenIndex = position631, tokenIndex631
					}
				l632:
					goto l617
				l623:
					position, tokenIndex = position617, tokenIndex617
					{
						position634, tokenIndex634 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l635
						}
						position++
						goto l634
					l635:
						position, tokenIndex = position634, tokenIndex634
						if buffer[position] != rune('X') {
							goto l633
						}
						position++
					}
				l634:
					{
						position636, tokenIndex636 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l637
						}
						position++
						goto l636
					l637:
						position, tokenIndex = position636, tokenIndex636
						if buffer[position] != rune('Z') {
							goto l633
						}
						position++
					}
				l636:
					{
						position638, tokenIndex638 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l639
						}
						position++
						goto l638
					l639:
						position, tokenIndex = position638, tokenIndex638
						if buffer[position] != rune('R') {
							goto l633
						}
						position++
					}
				l638:
					goto l617
				l633:
					position, tokenIndex = position617, tokenIndex617
					{
						position641, tokenIndex641 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l642
						}
						position++
						goto l641
					l642:
						position, tokenIndex = position641, tokenIndex641
						if buffer[position] != rune('W') {
							goto l640
						}
						position++
					}
				l641:
					{
						position643, tokenIndex643 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l644
						}
						position++
						goto l643
					l644:
						position, tokenIndex = position643, tokenIndex643
						if buffer[position] != rune('Z') {
							goto l640
						}
						position++
					}
				l643:
					{
						position645, tokenIndex645 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l646
						}
						position++
						goto l645
					l646:
						position, tokenIndex = position645, tokenIndex645
						if buffer[position] != rune('R') {
							goto l640
						}
						position++
					}
				l645:
					goto l617
				l640:
					position, tokenIndex = position617, tokenIndex617
					{
						position648, tokenIndex648 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l649
						}
						position++
						goto l648
					l649:
						position, tokenIndex = position648, tokenIndex648
						if buffer[position] != rune('N') {
							goto l647
						}
						position++
					}
				l648:
					{
						position650, tokenIndex650 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l651
						}
						position++
						goto l650
					l651:
						position, tokenIndex = position650, tokenIndex650
						if buffer[position] != rune('Z') {
							goto l647
						}
						position++
					}
				l650:
					{
						position652, tokenIndex652 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l653
						}
						position++
						goto l652
					l653:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('C') {
							goto l647
						}
						position++
					}
				l652:
					{
						position654, tokenIndex654 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l655
						}
						position++
						goto l654
					l655:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('V') {
							goto l647
						}
						position++
					}
				l654:
					goto l617
				l647:
					position, tokenIndex = position617, tokenIndex617
					if !_rules[ruleARMVectorRegister]() {
						goto l656
					}
					goto l617
				l656:
					position, tokenIndex = position617, tokenIndex617
					if buffer[position] != rune('{') {
						goto l615
					}
					position++
					{
						position657, tokenIndex657 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l657
						}
						goto l658
					l657:
						position, tokenIndex = position657, tokenIndex657
					}
				l658:
					if !_rules[ruleARMVectorRegister]() {
						goto l615
					}
				l659:
					{
						position660, tokenIndex660 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l660
						}
						position++
						{
							position661, tokenIndex661 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l661
							}
							goto l662
						l661:
							position, tokenIndex = position661, tokenIndex661
						}
					l662:
						if !_rules[ruleARMVectorRegister]() {
							goto l660
						}
						goto l659
					l660:
						position, tokenIndex = position660, tokenIndex660
					}
					{
						position663, tokenIndex663 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l663
						}
						goto l664
					l663:
						position, tokenIndex = position663, tokenIndex663
					}
				l664:
					if buffer[position] != rune('}') {
						goto l615
					}
					position++
					{
						position665, tokenIndex665 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l665
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l665
						}
						position++
						{
							position667, tokenIndex667 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l667
							}
							position++
							goto l668
						l667:
							position, tokenIndex = position667, tokenIndex667
						}
					l668:
						if buffer[position] != rune(']') {
							goto l665
						}
						position++
						goto l666
					l665:
						position, tokenIndex = position665, tokenIndex665
					}
				l666:
				}
			l617:
				add(ruleARMRegister, position616)
			}
			memoize(43, position615, tokenIndex615, true)
			return true
		l615:
			memoize(43, position615, tokenIndex615, false)
			position, tokenIndex = position615, tokenIndex615
			return false
		},
		/* 44 ARMVectorRegister <- <(('v' / 'V') [0-9] [0-9]? ('.' [0-9]* ('b' / 's' / 'd' / 'h' / 'q') ('[' [0-9] [0-9]? ']')?)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{44, position}]; ok {
				return memoizedResult(memoized)
			}
			position669, tokenIndex669 := position, tokenIndex
			{
				position670 := position
				{
					position671, tokenIndex671 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l672
					}
					position++
					goto l671
				l672:
					position, tokenIndex = position671, tokenIndex671
					if buffer[position] != rune('V') {
						goto l669
					}
					position++
				}
			l671:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l669
				}
				position++
				{
					position673, tokenIndex673 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l673
					}
					position++
					goto l674
				l673:
					position, tokenIndex = position673, tokenIndex673
				}
			l674:
				{
					position675, tokenIndex675 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l675
					}
					position++
				l677:
					{
						position678, tokenIndex678 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l678
						}
						position++
						goto l677
					l678:
						position, tokenIndex = position678, tokenIndex678
					}
					{
						position679, tokenIndex679 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l680
						}
						position++
						goto l679
					l680:
						position, tokenIndex = position679, tokenIndex679
						if buffer[position] != rune('s') {
							goto l681
						}
						position++
						goto l679
					l681:
						position, tokenIndex = position679, tokenIndex679
						if buffer[position] != rune('d') {
							goto l682
						}
						position++
						goto l679
					l682:
						position, tokenIndex = position679, tokenIndex679
						if buffer[position] != rune('h') {
							goto l683
						}
						position++
						goto l679
					l683:
						position, tokenIndex = position679, tokenIndex679
						if buffer[position] != rune('q') {
							goto l675
						}
						position++
					}
				l679:
					{
						position684, tokenIndex684 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l684
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l684
						}
						position++
						{
							position686, tokenIndex686 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l686
							}
							position++
							goto l687
						l686:
							position, tokenIndex = position686, tokenIndex686
						}
					l687:
						if buffer[position] != rune(']') {
							goto l684
						}
						position++
						goto l685
					l684:
						position, tokenIndex = position684, tokenIndex684
					}
				l685:
					goto l676
				l675:
					position, tokenIndex = position675, tokenIndex675
				}
			l676:
				add(ruleARMVectorRegister, position670)
			}
			memoize(44, position669, tokenIndex669, true)
			return true
		l669:
			memoize(44, position669, tokenIndex669, false)
			position, tokenIndex = position669, tokenIndex669
			return false
		},
		/* 45 MemoryRef <- <((SymbolRef BaseIndexScale) / SymbolRef / Low12BitsSymbolRef / (Offset* BaseIndexScale) / (SegmentRegister Offset BaseIndexScale) / (SegmentRegister BaseIndexScale) / (SegmentRegister Offset) / ARMBaseIndexScale / BaseIndexScale)> */
		func() bool {
			if memoized, ok := memoization[memoKey{45, position}]; ok {
				return memoizedResult(memoized)
			}
			position688, tokenIndex688 := position, tokenIndex
			{
				position689 := position
				{
					position690, tokenIndex690 := position, tokenIndex
					if !_rules[ruleSymbolRef]() {
						goto l691
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l691
					}
					goto l690
				l691:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleSymbolRef]() {
						goto l692
					}
					goto l690
				l692:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleLow12BitsSymbolRef]() {
						goto l693
					}
					goto l690
				l693:
					position, tokenIndex = position690, tokenIndex690
				l695:
					{
						position696, tokenIndex696 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l696
						}
						goto l695
					l696:
						position, tokenIndex = position696, tokenIndex696
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l694
					}
					goto l690
				l694:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleSegmentRegister]() {
						goto l697
					}
					if !_rules[ruleOffset]() {
						goto l697
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l697
					}
					goto l690
				l697:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleSegmentRegister]() {
						goto l698
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l698
					}
					goto l690
				l698:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleSegmentRegister]() {
						goto l699
					}
					if !_rules[ruleOffset]() {
						goto l699
					}
					goto l690
				l699:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleARMBaseIndexScale]() {
						goto l700
					}
					goto l690
				l700:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleBaseIndexScale]() {
						goto l688
					}
				}
			l690:
				add(ruleMemoryRef, position689)
			}
			memoize(45, position688, tokenIndex688, true)
			return true
		l688:
			memoize(45, position688, tokenIndex688, false)
			position, tokenIndex = position688, tokenIndex688
			return false
		},
		/* 46 SymbolRef <- <((Offset* '+')? (LocalSymbol / SymbolName) Offset* ('@' Section Offset*)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{46, position}]; ok {
				return memoizedResult(memoized)
			}
			position701, tokenIndex701 := position, tokenIndex
			{
				position702 := position
				{
					position703, tokenIndex703 := position, tokenIndex
				l705:
					{
						position706, tokenIndex706 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l706
						}
						goto l705
					l706:
						position, tokenIndex = position706, tokenIndex706
					}
					if buffer[position] != rune('+') {
						goto l703
					}
					position++
					goto l704
				l703:
					position, tokenIndex = position703, tokenIndex703
				}
			l704:
				{
					position707, tokenIndex707 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l708
					}
					goto l707
				l708:
					position, tokenIndex = position707, tokenIndex707
					if !_rules[ruleSymbolName]() {
						goto l701
					}
				}
			l707:
			l709:
				{
					position710, tokenIndex710 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l710
					}
					goto l709
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
				{
					position711, tokenIndex711 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l711
					}
					position++
					if !_rules[ruleSection]() {
						goto l711
					}
				l713:
					{
						position714, tokenIndex714 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l714
						}
						goto l713
					l714:
						position, tokenIndex = position714, tokenIndex714
					}
					goto l712
				l711:
					position, tokenIndex = position711, tokenIndex711
				}
			l712:
				add(ruleSymbolRef, position702)
			}
			memoize(46, position701, tokenIndex701, true)
			return true
		l701:
			memoize(46, position701, tokenIndex701, false)
			position, tokenIndex = position701, tokenIndex701
			return false
		},
		/* 47 Low12BitsSymbolRef <- <(':' ('l' / 'L') ('o' / 'O') '1' '2' ':' (LocalSymbol / SymbolName) Offset?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{47, position}]; ok {
				return memoizedResult(memoized)
			}
			position715, tokenIndex715 := position, tokenIndex
			{
				position716 := position
				if buffer[position] != rune(':') {
					goto l715
				}
				position++
				{
					position717, tokenIndex717 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l718
					}
					position++
					goto l717
				l718:
					position, tokenIndex = position717, tokenIndex717
					if buffer[position] != rune('L') {
						goto l715
					}
					position++
				}
			l717:
				{
					position719, tokenIndex719 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l720
					}
					position++
					goto l719
				l720:
					position, tokenIndex = position719, tokenIndex719
					if buffer[position] != rune('O') {
						goto l715
					}
					position++
				}
			l719:
				if buffer[position] != rune('1') {
					goto l715
				}
				position++
				if buffer[position] != rune('2') {
					goto l715
				}
				position++
				if buffer[position] != rune(':') {
					goto l715
				}
				position++
				{
					position721, tokenIndex721 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l722
					}
					goto l721
				l722:
					position, tokenIndex = position721, tokenIndex721
					if !_rules[ruleSymbolName]() {
						goto l715
					}
				}
			l721:
				{
					position723, tokenIndex723 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l723
					}
					goto l724
				l723:
					position, tokenIndex = position723, tokenIndex723
				}
			l724:
				add(ruleLow12BitsSymbolRef, position716)
			}
			memoize(47, position715, tokenIndex715, true)
			return true
		l715:
			memoize(47, position715, tokenIndex715, false)
			position, tokenIndex = position715, tokenIndex715
			return false
		},
		/* 48 ARMBaseIndexScale <- <('[' ARMRegister (',' WS? (('#' Offset (('*' [0-9]+) / ('*' '(' [0-9]+ Operator [0-9]+ ')') / ('+' [0-9]+)*)?) / ARMGOTLow12 / Low12BitsSymbolRef / ARMRegister) (',' WS? ARMConstantTweak)?)? ']' ARMPostincrement?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{48, position}]; ok {
				return memoizedResult(memoized)
			}
			position725, tokenIndex725 := position, tokenIndex
			{
				position726 := position
				if buffer[position] != rune('[') {
					goto l725
				}
				position++
				if !_rules[ruleARMRegister]() {
					goto l725
				}
				{
					position727, tokenIndex727 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l727
					}
					position++
					{
						position729, tokenIndex729 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l729
						}
						goto l730
					l729:
						position, tokenIndex = position729, tokenIndex729
					}
				l730:
					{
						position731, tokenIndex731 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l732
						}
						position++
						if !_rules[ruleOffset]() {
							goto l732
						}
						{
							position733, tokenIndex733 := position, tokenIndex
							{
								position735, tokenIndex735 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l736
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l736
								}
								position++
							l737:
								{
									position738, tokenIndex738 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l738
									}
									position++
									goto l737
								l738:
									position, tokenIndex = position738, tokenIndex738
								}
								goto l735
							l736:
								position, tokenIndex = position735, tokenIndex735
								if buffer[position] != rune('*') {
									goto l739
								}
								position++
								if buffer[position] != rune('(') {
									goto l739
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l739
								}
								position++
							l740:
								{
									position741, tokenIndex741 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l741
									}
									position++
									goto l740
								l741:
									position, tokenIndex = position741, tokenIndex741
								}
								if !_rules[ruleOperator]() {
									goto l739
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l739
								}
								position++
							l742:
								{
									position743, tokenIndex743 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l743
									}
									position++
									goto l742
								l743:
									position, tokenIndex = position743, tokenIndex743
								}
								if buffer[position] != rune(')') {
									goto l739
								}
								position++
								goto l735
							l739:
								position, tokenIndex = position735, tokenIndex735
							l744:
								{
									position745, tokenIndex745 := position, tokenIndex
									if buffer[position] != rune('+') {
										goto l745
									}
									position++
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l745
									}
									position++
								l746:
									{
										position747, tokenIndex747 := position, tokenIndex
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l747
										}
										position++
										goto l746
									l747:
										position, tokenIndex = position747, tokenIndex747
									}
									goto l744
								l745:
									position, tokenIndex = position745, tokenIndex745
								}
							}
						l735:
							goto l734

							position, tokenIndex = position733, tokenIndex733
						}
					l734:
						goto l731
					l732:
						position, tokenIndex = position731, tokenIndex731
						if !_rules[ruleARMGOTLow12]() {
							goto l748
						}
						goto l731
					l748:
						position, tokenIndex = position731, tokenIndex731
						if !_rules[ruleLow12BitsSymbolRef]() {
							goto l749
						}
						goto l731
					l749:
						position, tokenIndex = position731, tokenIndex731
						if !_rules[ruleARMRegister]() {
							goto l727
						}
					}
				l731:
					{
						position750, tokenIndex750 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l750
						}
						position++
						{
							position752, tokenIndex752 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l752
							}
							goto l753
						l752:
							position, tokenIndex = position752, tokenIndex752
						}
					l753:
						if !_rules[ruleARMConstantTweak]() {
							goto l750
						}
						goto l751
					l750:
						position, tokenIndex = position750, tokenIndex750
					}
				l751:
					goto l728
				l727:
					position, tokenIndex = position727, tokenIndex727
				}
			l728:
				if buffer[position] != rune(']') {
					goto l725
				}
				position++
				{
					position754, tokenIndex754 := position, tokenIndex
					if !_rules[ruleARMPostincrement]() {
						goto l754
					}
					goto l755
				l754:
					position, tokenIndex = position754, tokenIndex754
				}
			l755:
				add(ruleARMBaseIndexScale, position726)
			}
			memoize(48, position725, tokenIndex725, true)
			return true
		l725:
			memoize(48, position725, tokenIndex725, false)
			position, tokenIndex = position725, tokenIndex725
			return false
		},
		/* 49 ARMGOTLow12 <- <(':' ('g' / 'G') ('o' / 'O') ('t' / 'T') '_' ('l' / 'L') ('o' / 'O') '1' '2' ':' SymbolName)> */
		func() bool {
			if memoized, ok := memoization[memoKey{49, position}]; ok {
				return memoizedResult(memoized)
			}
			position756, tokenIndex756 := position, tokenIndex
			{
				position757 := position
				if buffer[position] != rune(':') {
					goto l756
				}
				position++
				{
					position758, tokenIndex758 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l759
					}
					position++
					goto l758
				l759:
					position, tokenIndex = position758, tokenIndex758
					if buffer[position] != rune('G') {
						goto l756
					}
					position++
				}
			l758:
				{
					position760, tokenIndex760 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l761
					}
					position++
					goto l760
				l761:
					position, tokenIndex = position760, tokenIndex760
					if buffer[position] != rune('O') {
						goto l756
					}
					position++
				}
			l760:
				{
					position762, tokenIndex762 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l763
					}
					position++
					goto l762
				l763:
					position, tokenIndex = position762, tokenIndex762
					if buffer[position] != rune('T') {
						goto l756
					}
					position++
				}
			l762:
				if buffer[position] != rune('_') {
					goto l756
				}
				position++
				{
					position764, tokenIndex764 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l765
					}
					position++
					goto l764
				l765:
					position, tokenIndex = position764, tokenIndex764
					if buffer[position] != rune('L') {
						goto l756
					}
					position++
				}
			l764:
				{
					position766, tokenIndex766 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l767
					}
					position++
					goto l766
				l767:
					position, tokenIndex = position766, tokenIndex766
					if buffer[position] != rune('O') {
						goto l756
					}
					position++
				}
			l766:
				if buffer[position] != rune('1') {
					goto l756
				}
				position++
				if buffer[position] != rune('2') {
					goto l756
				}
				position++
				if buffer[position] != rune(':') {
					goto l756
				}
				position++
				if !_rules[ruleSymbolName]() {
					goto l756
				}
				add(ruleARMGOTLow12, position757)
			}
			memoize(49, position756, tokenIndex756, true)
			return true
		l756:
			memoize(49, position756, tokenIndex756, false)
			position, tokenIndex = position756, tokenIndex756
			return false
		},
		/* 50 ARMPostincrement <- <'!'> */
		func() bool {
			if memoized, ok := memoization[memoKey{50, position}]; ok {
				return memoizedResult(memoized)
			}
			position768, tokenIndex768 := position, tokenIndex
			{
				position769 := position
				if buffer[position] != rune('!') {
					goto l768
				}
				position++
				add(ruleARMPostincrement, position769)
			}
			memoize(50, position768, tokenIndex768, true)
			return true
		l768:
			memoize(50, position768, tokenIndex768, false)
			position, tokenIndex = position768, tokenIndex768
			return false
		},
		/* 51 BaseIndexScale <- <('(' RegisterOrConstant? WS? (',' WS? RegisterOrConstant WS? (',' [0-9]+)?)? ')')> */
		func() bool {
			if memoized, ok := memoization[memoKey{51, position}]; ok {
				return memoizedResult(memoized)
			}
			position770, tokenIndex770 := position, tokenIndex
			{
				position771 := position
				if buffer[position] != rune('(') {
					goto l770
				}
				position++
				{
					position772, tokenIndex772 := position, tokenIndex
					if !_rules[ruleRegisterOrConstant]() {
						goto l772
					}
					goto l773
				l772:
					position, tokenIndex = position772, tokenIndex772
				}
			l773:
				{
					position774, tokenIndex774 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l774
					}
					goto l775
				l774:
					position, tokenIndex = position774, tokenIndex774
				}
			l775:
				{
					position776, tokenIndex776 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l776
					}
					position++
					{
						position778, tokenIndex778 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l778
						}
						goto l779
					l778:
						position, tokenIndex = position778, tokenIndex778
					}
				l779:
					if !_rules[ruleRegisterOrConstant]() {
						goto l776
					}
					{
						position780, tokenIndex780 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l780
						}
						goto l781
					l780:
						position, tokenIndex = position780, tokenIndex780
					}
				l781:
					{
						position782, tokenIndex782 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l782
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l782
						}
						position++
					l784:
						{
							position785, tokenIndex785 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l785
							}
							position++
							goto l784
						l785:
							position, tokenIndex = position785, tokenIndex785
						}
						goto l783
					l782:
						position, tokenIndex = position782, tokenIndex782
					}
				l783:
					goto l777
				l776:
					position, tokenIndex = position776, tokenIndex776
				}
			l777:
				if buffer[position] != rune(')') {
					goto l770
				}
				position++
				add(ruleBaseIndexScale, position771)
			}
			memoize(51, position770, tokenIndex770, true)
			return true
		l770:
			memoize(51, position770, tokenIndex770, false)
			position, tokenIndex = position770, tokenIndex770
			return false
		},
		/* 52 Operator <- <('+' / '-')> */
		func() bool {
			if memoized, ok := memoization[memoKey{52, position}]; ok {
				return memoizedResult(memoized)
			}
			position786, tokenIndex786 := position, tokenIndex
			{
				position787 := position
				{
					position788, tokenIndex788 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l789
					}
					position++
					goto l788
				l789:
					position, tokenIndex = position788, tokenIndex788
					if buffer[position] != rune('-') {
						goto l786
					}
					position++
				}
			l788:
				add(ruleOperator, position787)
			}
			memoize(52, position786, tokenIndex786, true)
			return true
		l786:
			memoize(52, position786, tokenIndex786, false)
			position, tokenIndex = position786, tokenIndex786
			return false
		},
		/* 53 Offset <- <('+'? '-'? (('0' ('b' / 'B') ('0' / '1')+) / ('0' ('x' / 'X') ([0-9] / [0-9] / ([a-f] / [A-F]))+) / [0-9]+))> */
		func() bool {
			if memoized, ok := memoization[memoKey{53, position}]; ok {
				return memoizedResult(memoized)
			}
			position790, tokenIndex790 := position, tokenIndex
			{
				position791 := position
				{
					position792, tokenIndex792 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l792
					}
					position++
					goto l793
				l792:
					position, tokenIndex = position792, tokenIndex792
				}
			l793:
				{
					position794, tokenIndex794 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l794
					}
					position++
					goto l795
				l794:
					position, tokenIndex = position794, tokenIndex794
				}
			l795:
				{
					position796, tokenIndex796 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l797
					}
					position++
					{
						position798, tokenIndex798 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l799
						}
						position++
						goto l798
					l799:
						position, tokenIndex = position798, tokenIndex798
						if buffer[position] != rune('B') {
							goto l797
						}
						position++
					}
				l798:
					{
						position802, tokenIndex802 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l803
						}
						position++
						goto l802
					l803:
						position, tokenIndex = position802, tokenIndex802
						if buffer[position] != rune('1') {
							goto l797
						}
						position++
					}
				l802:
				l800:
					{
						position801, tokenIndex801 := position, tokenIndex
						{
							position804, tokenIndex804 := position, tokenIndex
							if buffer[position] != rune('0') {
								goto l805
							}
							position++
							goto l804
						l805:
							position, tokenIndex = position804, tokenIndex804
							if buffer[position] != rune('1') {
								goto l801
							}
							position++
						}
					l804:
						goto l800
					l801:
						position, tokenIndex = position801, tokenIndex801
					}
					goto l796
				l797:
					position, tokenIndex = position796, tokenIndex796
					if buffer[position] != rune('0') {
						goto l806
					}
					position++
					{
						position807, tokenIndex807 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l808
						}
						position++
						goto l807
					l808:
						position, tokenIndex = position807, tokenIndex807
						if buffer[position] != rune('X') {
							goto l806
						}
						position++
					}
				l807:
					{
						position811, tokenIndex811 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l812
						}
						position++
						goto l811
					l812:
						position, tokenIndex = position811, tokenIndex811
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l813
						}
						position++
						goto l811
					l813:
						position, tokenIndex = position811, tokenIndex811
						{
							position814, tokenIndex814 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l815
							}
							position++
							goto l814
						l815:
							position, tokenIndex = position814, tokenIndex814
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l806
							}
							position++
						}
					l814:
					}
				l811:
				l809:
					{
						position810, tokenIndex810 := position, tokenIndex
						{
							position816, tokenIndex816 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l817
							}
							position++
							goto l816
						l817:
							position, tokenIndex = position816, tokenIndex816
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l818
							}
							position++
							goto l816
						l818:
							position, tokenIndex = position816, tokenIndex816
							{
								position819, tokenIndex819 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('f') {
									goto l820
								}
								position++
								goto l819
							l820:
								position, tokenIndex = position819, tokenIndex819
								if c := buffer[position]; c < rune('A') || c > rune('F') {
									goto l810
								}
								position++
							}
						l819:
						}
					l816:
						goto l809
					l810:
						position, tokenIndex = position810, tokenIndex810
					}
					goto l796
				l806:
					position, tokenIndex = position796, tokenIndex796
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l790
					}
					position++
				l821:
					{
						position822, tokenIndex822 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l822
						}
						position++
						goto l821
					l822:
						position, tokenIndex = position822, tokenIndex822
					}
				}
			l796:
				add(ruleOffset, position791)
			}
			memoize(53, position790, tokenIndex790, true)
			return true
		l790:
			memoize(53, position790, tokenIndex790, false)
			position, tokenIndex = position790, tokenIndex790
			return false
		},
		/* 54 Section <- <([a-z] / [A-Z] / '@')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{54, position}]; ok {
				return memoizedResult(memoized)
			}
			position823, tokenIndex823 := position, tokenIndex
			{
				position824 := position
				{
					position827, tokenIndex827 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l828
					}
					position++
					goto l827
				l828:
					position, tokenIndex = position827, tokenIndex827
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l829
					}
					position++
					goto l827
				l829:
					position, tokenIndex = position827, tokenIndex827
					if buffer[position] != rune('@') {
						goto l823
					}
					position++
				}
			l827:
			l825:
				{
					position826, tokenIndex826 := position, tokenIndex
					{
						position830, tokenIndex830 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l831
						}
						position++
						goto l830
					l831:
						position, tokenIndex = position830, tokenIndex830
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l832
						}
						position++
						goto l830
					l832:
						position, tokenIndex = position830, tokenIndex830
						if buffer[position] != rune('@') {
							goto l826
						}
						position++
					}
				l830:
					goto l825
				l826:
					position, tokenIndex = position826, tokenIndex826
				}
				add(ruleSection, position824)
			}
			memoize(54, position823, tokenIndex823, true)
			return true
		l823:
			memoize(54, position823, tokenIndex823, false)
			position, tokenIndex = position823, tokenIndex823
			return false
		},
		/* 55 SegmentRegister <- <('%' ([c-g] / 's') ('s' ':'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{55, position}]; ok {
				return memoizedResult(memoized)
			}
			position833, tokenIndex833 := position, tokenIndex
			{
				position834 := position
				if buffer[position] != rune('%') {
					goto l833
				}
				position++
				{
					position835, tokenIndex835 := position, tokenIndex
					if c := buffer[position]; c < rune('c') || c > rune('g') {
						goto l836
					}
					position++
					goto l835
				l836:
					position, tokenIndex = position835, tokenIndex835
					if buffer[position] != rune('s') {
						goto l833
					}
					position++
				}
			l835:
				if buffer[position] != rune('s') {
					goto l833
				}
				position++
				if buffer[position] != rune(':') {
					goto l833
				}
				position++
				add(ruleSegmentRegister, position834)
			}
			memoize(55, position833, tokenIndex833, true)
			return true
		l833:
			memoize(55, position833, tokenIndex833, false)
			position, tokenIndex = position833, tokenIndex833
			return false
		},
	}
	p.rules = _rules
	return nil
}
