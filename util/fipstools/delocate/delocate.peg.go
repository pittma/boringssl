package main

// Code generated by ./peg delocate.peg DO NOT EDIT.

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleAsmFile
	ruleStatement
	ruleGlobalDirective
	ruleDirective
	ruleDirectiveName
	ruleLocationDirective
	ruleFileDirective
	ruleLocDirective
	ruleArgs
	ruleArg
	ruleQuotedArg
	ruleQuotedText
	ruleLabelContainingDirective
	ruleLabelContainingDirectiveName
	ruleSymbolArgs
	ruleSymbolArg
	ruleSymbolExpr
	ruleSymbolAtom
	ruleSymbolOperator
	ruleOpenParen
	ruleCloseParen
	ruleSymbolType
	ruleDot
	ruleTCMarker
	ruleEscapedChar
	ruleWS
	ruleComment
	ruleLabel
	ruleSymbolName
	ruleLocalSymbol
	ruleLocalLabel
	ruleLocalLabelRef
	ruleInstruction
	ruleInstructionName
	ruleInstructionArg
	ruleGOTLocation
	ruleGOTSymbolOffset
	ruleAVX512Token
	ruleTOCRefHigh
	ruleTOCRefLow
	ruleIndirectionIndicator
	ruleRegisterOrConstant
	ruleARMConstantTweak
	ruleARMRegister
	ruleARMVectorRegister
	ruleMemoryRef
	ruleSymbolRef
	ruleLow12BitsSymbolRef
	ruleARMBaseIndexScale
	ruleARMGOTLow12
	ruleARMPostincrement
	ruleBaseIndexScale
	ruleOperator
	ruleOffset
	ruleSection
	ruleSegmentRegister
)

var rul3s = [...]string{
	"Unknown",
	"AsmFile",
	"Statement",
	"GlobalDirective",
	"Directive",
	"DirectiveName",
	"LocationDirective",
	"FileDirective",
	"LocDirective",
	"Args",
	"Arg",
	"QuotedArg",
	"QuotedText",
	"LabelContainingDirective",
	"LabelContainingDirectiveName",
	"SymbolArgs",
	"SymbolArg",
	"SymbolExpr",
	"SymbolAtom",
	"SymbolOperator",
	"OpenParen",
	"CloseParen",
	"SymbolType",
	"Dot",
	"TCMarker",
	"EscapedChar",
	"WS",
	"Comment",
	"Label",
	"SymbolName",
	"LocalSymbol",
	"LocalLabel",
	"LocalLabelRef",
	"Instruction",
	"InstructionName",
	"InstructionArg",
	"GOTLocation",
	"GOTSymbolOffset",
	"AVX512Token",
	"TOCRefHigh",
	"TOCRefLow",
	"IndirectionIndicator",
	"RegisterOrConstant",
	"ARMConstantTweak",
	"ARMRegister",
	"ARMVectorRegister",
	"MemoryRef",
	"SymbolRef",
	"Low12BitsSymbolRef",
	"ARMBaseIndexScale",
	"ARMGOTLow12",
	"ARMPostincrement",
	"BaseIndexScale",
	"Operator",
	"Offset",
	"Section",
	"SegmentRegister",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Asm struct {
	Buffer         string
	buffer         []rune
	rules          [57]func() bool
	parse          func(rule ...int) error
	reset          func()
	Pretty         bool
	disableMemoize bool
	tokens32
}

func (p *Asm) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Asm) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Asm
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Asm) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Asm) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Asm) SprintSyntaxTree() string {
	var b bytes.Buffer
	p.WriteSyntaxTree(&b)
	return b.String()
}

func Pretty(pretty bool) func(*Asm) error {
	return func(p *Asm) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Asm) error {
	return func(p *Asm) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}

func DisableMemoize() func(*Asm) error {
	return func(p *Asm) error {
		p.disableMemoize = true
		return nil
	}
}

type memo struct {
	Matched bool
	Partial []token32
}

type memoKey struct {
	Rule     uint32
	Position uint32
}

func (p *Asm) Init(options ...func(*Asm) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		memoization          map[memoKey]memo
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0
		memoization = make(map[memoKey]memo)
		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	memoize := func(rule uint32, begin uint32, tokenIndexStart uint32, matched bool) {
		if p.disableMemoize {
			return
		}
		key := memoKey{rule, begin}
		if !matched {
			memoization[key] = memo{Matched: false}
		} else {
			t := tree.tree[tokenIndexStart:tokenIndex]
			tokenCopy := make([]token32, len(t))
			copy(tokenCopy, t)
			memoization[key] = memo{Matched: true, Partial: tokenCopy}
		}
	}

	memoizedResult := func(m memo) bool {
		if !m.Matched {
			return false
		}
		tree.tree = append(tree.tree[:tokenIndex], m.Partial...)
		tokenIndex += uint32(len(m.Partial))
		position = m.Partial[len(m.Partial)-1].end
		if tree.tree[tokenIndex-1].begin != position && position > max.end {
			max = tree.tree[tokenIndex-1]
		}
		return true
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 AsmFile <- <(Statement* !.)> */
		func() bool {
			if memoized, ok := memoization[memoKey{0, position}]; ok {
				return memoizedResult(memoized)
			}
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleStatement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleAsmFile, position1)
			}
			memoize(0, position0, tokenIndex0, true)
			return true
		l0:
			memoize(0, position0, tokenIndex0, false)
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Statement <- <(WS? (Label / ((GlobalDirective / LocationDirective / LabelContainingDirective / Instruction / Directive / Comment / ) WS? ((Comment? '\n') / ';'))))> */
		func() bool {
			if memoized, ok := memoization[memoKey{1, position}]; ok {
				return memoizedResult(memoized)
			}
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l7
					}
					goto l8
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleLabel]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[ruleGlobalDirective]() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLocationDirective]() {
							goto l13
						}
						goto l11
					l13:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLabelContainingDirective]() {
							goto l14
						}
						goto l11
					l14:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleInstruction]() {
							goto l15
						}
						goto l11
					l15:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleDirective]() {
							goto l16
						}
						goto l11
					l16:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleComment]() {
							goto l17
						}
						goto l11
					l17:
						position, tokenIndex = position11, tokenIndex11
					}
				l11:
					{
						position18, tokenIndex18 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l18
						}
						goto l19
					l18:
						position, tokenIndex = position18, tokenIndex18
					}
				l19:
					{
						position20, tokenIndex20 := position, tokenIndex
						{
							position22, tokenIndex22 := position, tokenIndex
							if !_rules[ruleComment]() {
								goto l22
							}
							goto l23
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
					l23:
						if buffer[position] != rune('\n') {
							goto l21
						}
						position++
						goto l20
					l21:
						position, tokenIndex = position20, tokenIndex20
						if buffer[position] != rune(';') {
							goto l5
						}
						position++
					}
				l20:
				}
			l9:
				add(ruleStatement, position6)
			}
			memoize(1, position5, tokenIndex5, true)
			return true
		l5:
			memoize(1, position5, tokenIndex5, false)
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 GlobalDirective <- <((('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('a' / 'A') ('l' / 'L')) / ('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('l' / 'L'))) WS SymbolName)> */
		func() bool {
			if memoized, ok := memoization[memoKey{2, position}]; ok {
				return memoizedResult(memoized)
			}
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l27
					}
					position++
					{
						position28, tokenIndex28 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l29
						}
						position++
						goto l28
					l29:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('G') {
							goto l27
						}
						position++
					}
				l28:
					{
						position30, tokenIndex30 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l31
						}
						position++
						goto l30
					l31:
						position, tokenIndex = position30, tokenIndex30
						if buffer[position] != rune('L') {
							goto l27
						}
						position++
					}
				l30:
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('O') {
							goto l27
						}
						position++
					}
				l32:
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('B') {
							goto l27
						}
						position++
					}
				l34:
					{
						position36, tokenIndex36 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l37
						}
						position++
						goto l36
					l37:
						position, tokenIndex = position36, tokenIndex36
						if buffer[position] != rune('A') {
							goto l27
						}
						position++
					}
				l36:
					{
						position38, tokenIndex38 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l39
						}
						position++
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						if buffer[position] != rune('L') {
							goto l27
						}
						position++
					}
				l38:
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('.') {
						goto l24
					}
					position++
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune('G') {
							goto l24
						}
						position++
					}
				l40:
					{
						position42, tokenIndex42 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l43
						}
						position++
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						if buffer[position] != rune('L') {
							goto l24
						}
						position++
					}
				l42:
					{
						position44, tokenIndex44 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l45
						}
						position++
						goto l44
					l45:
						position, tokenIndex = position44, tokenIndex44
						if buffer[position] != rune('O') {
							goto l24
						}
						position++
					}
				l44:
					{
						position46, tokenIndex46 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l47
						}
						position++
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						if buffer[position] != rune('B') {
							goto l24
						}
						position++
					}
				l46:
					{
						position48, tokenIndex48 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l49
						}
						position++
						goto l48
					l49:
						position, tokenIndex = position48, tokenIndex48
						if buffer[position] != rune('L') {
							goto l24
						}
						position++
					}
				l48:
				}
			l26:
				if !_rules[ruleWS]() {
					goto l24
				}
				if !_rules[ruleSymbolName]() {
					goto l24
				}
				add(ruleGlobalDirective, position25)
			}
			memoize(2, position24, tokenIndex24, true)
			return true
		l24:
			memoize(2, position24, tokenIndex24, false)
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 3 Directive <- <('.' DirectiveName (WS Args)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{3, position}]; ok {
				return memoizedResult(memoized)
			}
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if buffer[position] != rune('.') {
					goto l50
				}
				position++
				if !_rules[ruleDirectiveName]() {
					goto l50
				}
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l52
					}
					if !_rules[ruleArgs]() {
						goto l52
					}
					goto l53
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				add(ruleDirective, position51)
			}
			memoize(3, position50, tokenIndex50, true)
			return true
		l50:
			memoize(3, position50, tokenIndex50, false)
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 4 DirectiveName <- <([a-z] / [A-Z] / ([0-9] / [0-9]) / '_')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{4, position}]; ok {
				return memoizedResult(memoized)
			}
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position58, tokenIndex58 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l59
					}
					position++
					goto l58
				l59:
					position, tokenIndex = position58, tokenIndex58
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l60
					}
					position++
					goto l58
				l60:
					position, tokenIndex = position58, tokenIndex58
					{
						position62, tokenIndex62 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l63
						}
						position++
						goto l62
					l63:
						position, tokenIndex = position62, tokenIndex62
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l61
						}
						position++
					}
				l62:
					goto l58
				l61:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('_') {
						goto l54
					}
					position++
				}
			l58:
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position64, tokenIndex64 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l65
						}
						position++
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l66
						}
						position++
						goto l64
					l66:
						position, tokenIndex = position64, tokenIndex64
						{
							position68, tokenIndex68 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l69
							}
							position++
							goto l68
						l69:
							position, tokenIndex = position68, tokenIndex68
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l67
							}
							position++
						}
					l68:
						goto l64
					l67:
						position, tokenIndex = position64, tokenIndex64
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
					}
				l64:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleDirectiveName, position55)
			}
			memoize(4, position54, tokenIndex54, true)
			return true
		l54:
			memoize(4, position54, tokenIndex54, false)
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 5 LocationDirective <- <(FileDirective / LocDirective)> */
		func() bool {
			if memoized, ok := memoization[memoKey{5, position}]; ok {
				return memoizedResult(memoized)
			}
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if !_rules[ruleFileDirective]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleLocDirective]() {
						goto l70
					}
				}
			l72:
				add(ruleLocationDirective, position71)
			}
			memoize(5, position70, tokenIndex70, true)
			return true
		l70:
			memoize(5, position70, tokenIndex70, false)
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 6 FileDirective <- <('.' ('f' / 'F') ('i' / 'I') ('l' / 'L') ('e' / 'E') WS (!('#' / '\n') .)+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{6, position}]; ok {
				return memoizedResult(memoized)
			}
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				if buffer[position] != rune('.') {
					goto l74
				}
				position++
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l77
					}
					position++
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					if buffer[position] != rune('F') {
						goto l74
					}
					position++
				}
			l76:
				{
					position78, tokenIndex78 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l79
					}
					position++
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if buffer[position] != rune('I') {
						goto l74
					}
					position++
				}
			l78:
				{
					position80, tokenIndex80 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l81
					}
					position++
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if buffer[position] != rune('L') {
						goto l74
					}
					position++
				}
			l80:
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if buffer[position] != rune('E') {
						goto l74
					}
					position++
				}
			l82:
				if !_rules[ruleWS]() {
					goto l74
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position87, tokenIndex87 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l88
						}
						position++
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if buffer[position] != rune('\n') {
							goto l86
						}
						position++
					}
				l87:
					goto l74
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				if !matchDot() {
					goto l74
				}
			l84:
				{
					position85, tokenIndex85 := position, tokenIndex
					{
						position89, tokenIndex89 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l91
							}
							position++
							goto l90
						l91:
							position, tokenIndex = position90, tokenIndex90
							if buffer[position] != rune('\n') {
								goto l89
							}
							position++
						}
					l90:
						goto l85
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					if !matchDot() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position85, tokenIndex85
				}
				add(ruleFileDirective, position75)
			}
			memoize(6, position74, tokenIndex74, true)
			return true
		l74:
			memoize(6, position74, tokenIndex74, false)
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 7 LocDirective <- <('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') WS (!('#' / '/' / '\n') .)+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{7, position}]; ok {
				return memoizedResult(memoized)
			}
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if buffer[position] != rune('.') {
					goto l92
				}
				position++
				{
					position94, tokenIndex94 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if buffer[position] != rune('L') {
						goto l92
					}
					position++
				}
			l94:
				{
					position96, tokenIndex96 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l97
					}
					position++
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('O') {
						goto l92
					}
					position++
				}
			l96:
				{
					position98, tokenIndex98 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l99
					}
					position++
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if buffer[position] != rune('C') {
						goto l92
					}
					position++
				}
			l98:
				if !_rules[ruleWS]() {
					goto l92
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('/') {
							goto l105
						}
						position++
						goto l103
					l105:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('\n') {
							goto l102
						}
						position++
					}
				l103:
					goto l92
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
				if !matchDot() {
					goto l92
				}
			l100:
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						{
							position107, tokenIndex107 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l108
							}
							position++
							goto l107
						l108:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('/') {
								goto l109
							}
							position++
							goto l107
						l109:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('\n') {
								goto l106
							}
							position++
						}
					l107:
						goto l101
					l106:
						position, tokenIndex = position106, tokenIndex106
					}
					if !matchDot() {
						goto l101
					}
					goto l100
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				add(ruleLocDirective, position93)
			}
			memoize(7, position92, tokenIndex92, true)
			return true
		l92:
			memoize(7, position92, tokenIndex92, false)
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 8 Args <- <(Arg (WS? ',' WS? Arg)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{8, position}]; ok {
				return memoizedResult(memoized)
			}
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if !_rules[ruleArg]() {
					goto l110
				}
			l112:
				{
					position113, tokenIndex113 := position, tokenIndex
					{
						position114, tokenIndex114 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l114
						}
						goto l115
					l114:
						position, tokenIndex = position114, tokenIndex114
					}
				l115:
					if buffer[position] != rune(',') {
						goto l113
					}
					position++
					{
						position116, tokenIndex116 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l116
						}
						goto l117
					l116:
						position, tokenIndex = position116, tokenIndex116
					}
				l117:
					if !_rules[ruleArg]() {
						goto l113
					}
					goto l112
				l113:
					position, tokenIndex = position113, tokenIndex113
				}
				add(ruleArgs, position111)
			}
			memoize(8, position110, tokenIndex110, true)
			return true
		l110:
			memoize(8, position110, tokenIndex110, false)
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 Arg <- <(QuotedArg / ([0-9] / [0-9] / ([a-z] / [A-Z]) / '%' / '+' / '-' / '*' / '_' / '@' / '.')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{9, position}]; ok {
				return memoizedResult(memoized)
			}
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[ruleQuotedArg]() {
						goto l121
					}
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
				l122:
					{
						position123, tokenIndex123 := position, tokenIndex
						{
							position124, tokenIndex124 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l125
							}
							position++
							goto l124
						l125:
							position, tokenIndex = position124, tokenIndex124
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l126
							}
							position++
							goto l124
						l126:
							position, tokenIndex = position124, tokenIndex124
							{
								position128, tokenIndex128 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l129
								}
								position++
								goto l128
							l129:
								position, tokenIndex = position128, tokenIndex128
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l127
								}
								position++
							}
						l128:
							goto l124
						l127:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('%') {
								goto l130
							}
							position++
							goto l124
						l130:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('+') {
								goto l131
							}
							position++
							goto l124
						l131:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('-') {
								goto l132
							}
							position++
							goto l124
						l132:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('*') {
								goto l133
							}
							position++
							goto l124
						l133:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('_') {
								goto l134
							}
							position++
							goto l124
						l134:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('@') {
								goto l135
							}
							position++
							goto l124
						l135:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('.') {
								goto l123
							}
							position++
						}
					l124:
						goto l122
					l123:
						position, tokenIndex = position123, tokenIndex123
					}
				}
			l120:
				add(ruleArg, position119)
			}
			memoize(9, position118, tokenIndex118, true)
			return true
		},
		/* 10 QuotedArg <- <('"' QuotedText '"')> */
		func() bool {
			if memoized, ok := memoization[memoKey{10, position}]; ok {
				return memoizedResult(memoized)
			}
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('"') {
					goto l136
				}
				position++
				if !_rules[ruleQuotedText]() {
					goto l136
				}
				if buffer[position] != rune('"') {
					goto l136
				}
				position++
				add(ruleQuotedArg, position137)
			}
			memoize(10, position136, tokenIndex136, true)
			return true
		l136:
			memoize(10, position136, tokenIndex136, false)
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 11 QuotedText <- <(EscapedChar / (!'"' .))*> */
		func() bool {
			if memoized, ok := memoization[memoKey{11, position}]; ok {
				return memoizedResult(memoized)
			}
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
			l140:
				{
					position141, tokenIndex141 := position, tokenIndex
					{
						position142, tokenIndex142 := position, tokenIndex
						if !_rules[ruleEscapedChar]() {
							goto l143
						}
						goto l142
					l143:
						position, tokenIndex = position142, tokenIndex142
						{
							position144, tokenIndex144 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l144
							}
							position++
							goto l141
						l144:
							position, tokenIndex = position144, tokenIndex144
						}
						if !matchDot() {
							goto l141
						}
					}
				l142:
					goto l140
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				add(ruleQuotedText, position139)
			}
			memoize(11, position138, tokenIndex138, true)
			return true
		},
		/* 12 LabelContainingDirective <- <(LabelContainingDirectiveName WS SymbolArgs)> */
		func() bool {
			if memoized, ok := memoization[memoKey{12, position}]; ok {
				return memoizedResult(memoized)
			}
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if !_rules[ruleLabelContainingDirectiveName]() {
					goto l145
				}
				if !_rules[ruleWS]() {
					goto l145
				}
				if !_rules[ruleSymbolArgs]() {
					goto l145
				}
				add(ruleLabelContainingDirective, position146)
			}
			memoize(12, position145, tokenIndex145, true)
			return true
		l145:
			memoize(12, position145, tokenIndex145, false)
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 13 LabelContainingDirectiveName <- <(('.' ('x' / 'X') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('h' / 'H') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('l' / 'L') ('o' / 'O') ('n' / 'N') ('g' / 'G')) / ('.' ('s' / 'S') ('e' / 'E') ('t' / 'T')) / ('.' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '8' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '4' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' ('q' / 'Q') ('u' / 'U') ('a' / 'A') ('d' / 'D')) / ('.' ('t' / 'T') ('c' / 'C')) / ('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') ('a' / 'A') ('l' / 'L') ('e' / 'E') ('n' / 'N') ('t' / 'T') ('r' / 'R') ('y' / 'Y')) / ('.' ('s' / 'S') ('i' / 'I') ('z' / 'Z') ('e' / 'E')) / ('.' ('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')) / ('.' ('u' / 'U') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8') / ('.' ('s' / 'S') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{13, position}]; ok {
				return memoizedResult(memoized)
			}
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l150
					}
					position++
					{
						position151, tokenIndex151 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l152
						}
						position++
						goto l151
					l152:
						position, tokenIndex = position151, tokenIndex151
						if buffer[position] != rune('X') {
							goto l150
						}
						position++
					}
				l151:
					{
						position153, tokenIndex153 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l154
						}
						position++
						goto l153
					l154:
						position, tokenIndex = position153, tokenIndex153
						if buffer[position] != rune('W') {
							goto l150
						}
						position++
					}
				l153:
					{
						position155, tokenIndex155 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l156
						}
						position++
						goto l155
					l156:
						position, tokenIndex = position155, tokenIndex155
						if buffer[position] != rune('O') {
							goto l150
						}
						position++
					}
				l155:
					{
						position157, tokenIndex157 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l158
						}
						position++
						goto l157
					l158:
						position, tokenIndex = position157, tokenIndex157
						if buffer[position] != rune('R') {
							goto l150
						}
						position++
					}
				l157:
					{
						position159, tokenIndex159 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l160
						}
						position++
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						if buffer[position] != rune('D') {
							goto l150
						}
						position++
					}
				l159:
					goto l149
				l150:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l161
					}
					position++
					{
						position162, tokenIndex162 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l163
						}
						position++
						goto l162
					l163:
						position, tokenIndex = position162, tokenIndex162
						if buffer[position] != rune('W') {
							goto l161
						}
						position++
					}
				l162:
					{
						position164, tokenIndex164 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l165
						}
						position++
						goto l164
					l165:
						position, tokenIndex = position164, tokenIndex164
						if buffer[position] != rune('O') {
							goto l161
						}
						position++
					}
				l164:
					{
						position166, tokenIndex166 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l167
						}
						position++
						goto l166
					l167:
						position, tokenIndex = position166, tokenIndex166
						if buffer[position] != rune('R') {
							goto l161
						}
						position++
					}
				l166:
					{
						position168, tokenIndex168 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l169
						}
						position++
						goto l168
					l169:
						position, tokenIndex = position168, tokenIndex168
						if buffer[position] != rune('D') {
							goto l161
						}
						position++
					}
				l168:
					goto l149
				l161:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l170
					}
					position++
					{
						position171, tokenIndex171 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l172
						}
						position++
						goto l171
					l172:
						position, tokenIndex = position171, tokenIndex171
						if buffer[position] != rune('H') {
							goto l170
						}
						position++
					}
				l171:
					{
						position173, tokenIndex173 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l174
						}
						position++
						goto l173
					l174:
						position, tokenIndex = position173, tokenIndex173
						if buffer[position] != rune('W') {
							goto l170
						}
						position++
					}
				l173:
					{
						position175, tokenIndex175 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l176
						}
						position++
						goto l175
					l176:
						position, tokenIndex = position175, tokenIndex175
						if buffer[position] != rune('O') {
							goto l170
						}
						position++
					}
				l175:
					{
						position177, tokenIndex177 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l178
						}
						position++
						goto l177
					l178:
						position, tokenIndex = position177, tokenIndex177
						if buffer[position] != rune('R') {
							goto l170
						}
						position++
					}
				l177:
					{
						position179, tokenIndex179 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l180
						}
						position++
						goto l179
					l180:
						position, tokenIndex = position179, tokenIndex179
						if buffer[position] != rune('D') {
							goto l170
						}
						position++
					}
				l179:
					goto l149
				l170:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l181
					}
					position++
					{
						position182, tokenIndex182 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l183
						}
						position++
						goto l182
					l183:
						position, tokenIndex = position182, tokenIndex182
						if buffer[position] != rune('L') {
							goto l181
						}
						position++
					}
				l182:
					{
						position184, tokenIndex184 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l185
						}
						position++
						goto l184
					l185:
						position, tokenIndex = position184, tokenIndex184
						if buffer[position] != rune('O') {
							goto l181
						}
						position++
					}
				l184:
					{
						position186, tokenIndex186 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l187
						}
						position++
						goto l186
					l187:
						position, tokenIndex = position186, tokenIndex186
						if buffer[position] != rune('N') {
							goto l181
						}
						position++
					}
				l186:
					{
						position188, tokenIndex188 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l189
						}
						position++
						goto l188
					l189:
						position, tokenIndex = position188, tokenIndex188
						if buffer[position] != rune('G') {
							goto l181
						}
						position++
					}
				l188:
					goto l149
				l181:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l190
					}
					position++
					{
						position191, tokenIndex191 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l192
						}
						position++
						goto l191
					l192:
						position, tokenIndex = position191, tokenIndex191
						if buffer[position] != rune('S') {
							goto l190
						}
						position++
					}
				l191:
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('E') {
							goto l190
						}
						position++
					}
				l193:
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('T') {
							goto l190
						}
						position++
					}
				l195:
					goto l149
				l190:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l197
					}
					position++
					{
						position198, tokenIndex198 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l199
						}
						position++
						goto l198
					l199:
						position, tokenIndex = position198, tokenIndex198
						if buffer[position] != rune('B') {
							goto l197
						}
						position++
					}
				l198:
					{
						position200, tokenIndex200 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l201
						}
						position++
						goto l200
					l201:
						position, tokenIndex = position200, tokenIndex200
						if buffer[position] != rune('Y') {
							goto l197
						}
						position++
					}
				l200:
					{
						position202, tokenIndex202 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l203
						}
						position++
						goto l202
					l203:
						position, tokenIndex = position202, tokenIndex202
						if buffer[position] != rune('T') {
							goto l197
						}
						position++
					}
				l202:
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l205
						}
						position++
						goto l204
					l205:
						position, tokenIndex = position204, tokenIndex204
						if buffer[position] != rune('E') {
							goto l197
						}
						position++
					}
				l204:
					goto l149
				l197:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l206
					}
					position++
					if buffer[position] != rune('8') {
						goto l206
					}
					position++
					{
						position207, tokenIndex207 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l208
						}
						position++
						goto l207
					l208:
						position, tokenIndex = position207, tokenIndex207
						if buffer[position] != rune('B') {
							goto l206
						}
						position++
					}
				l207:
					{
						position209, tokenIndex209 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l210
						}
						position++
						goto l209
					l210:
						position, tokenIndex = position209, tokenIndex209
						if buffer[position] != rune('Y') {
							goto l206
						}
						position++
					}
				l209:
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('T') {
							goto l206
						}
						position++
					}
				l211:
					{
						position213, tokenIndex213 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l214
						}
						position++
						goto l213
					l214:
						position, tokenIndex = position213, tokenIndex213
						if buffer[position] != rune('E') {
							goto l206
						}
						position++
					}
				l213:
					goto l149
				l206:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l215
					}
					position++
					if buffer[position] != rune('4') {
						goto l215
					}
					position++
					{
						position216, tokenIndex216 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l217
						}
						position++
						goto l216
					l217:
						position, tokenIndex = position216, tokenIndex216
						if buffer[position] != rune('B') {
							goto l215
						}
						position++
					}
				l216:
					{
						position218, tokenIndex218 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l219
						}
						position++
						goto l218
					l219:
						position, tokenIndex = position218, tokenIndex218
						if buffer[position] != rune('Y') {
							goto l215
						}
						position++
					}
				l218:
					{
						position220, tokenIndex220 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l221
						}
						position++
						goto l220
					l221:
						position, tokenIndex = position220, tokenIndex220
						if buffer[position] != rune('T') {
							goto l215
						}
						position++
					}
				l220:
					{
						position222, tokenIndex222 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('E') {
							goto l215
						}
						position++
					}
				l222:
					goto l149
				l215:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l224
					}
					position++
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('q') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('Q') {
							goto l224
						}
						position++
					}
				l225:
					{
						position227, tokenIndex227 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l228
						}
						position++
						goto l227
					l228:
						position, tokenIndex = position227, tokenIndex227
						if buffer[position] != rune('U') {
							goto l224
						}
						position++
					}
				l227:
					{
						position229, tokenIndex229 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l230
						}
						position++
						goto l229
					l230:
						position, tokenIndex = position229, tokenIndex229
						if buffer[position] != rune('A') {
							goto l224
						}
						position++
					}
				l229:
					{
						position231, tokenIndex231 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l232
						}
						position++
						goto l231
					l232:
						position, tokenIndex = position231, tokenIndex231
						if buffer[position] != rune('D') {
							goto l224
						}
						position++
					}
				l231:
					goto l149
				l224:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l233
					}
					position++
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('T') {
							goto l233
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('C') {
							goto l233
						}
						position++
					}
				l236:
					goto l149
				l233:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l238
					}
					position++
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l240
						}
						position++
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('L') {
							goto l238
						}
						position++
					}
				l239:
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('O') {
							goto l238
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('C') {
							goto l238
						}
						position++
					}
				l243:
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l246
						}
						position++
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('A') {
							goto l238
						}
						position++
					}
				l245:
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('L') {
							goto l238
						}
						position++
					}
				l247:
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('E') {
							goto l238
						}
						position++
					}
				l249:
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('N') {
							goto l238
						}
						position++
					}
				l251:
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('T') {
							goto l238
						}
						position++
					}
				l253:
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('R') {
							goto l238
						}
						position++
					}
				l255:
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l258
						}
						position++
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if buffer[position] != rune('Y') {
							goto l238
						}
						position++
					}
				l257:
					goto l149
				l238:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					{
						position260, tokenIndex260 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l261
						}
						position++
						goto l260
					l261:
						position, tokenIndex = position260, tokenIndex260
						if buffer[position] != rune('S') {
							goto l259
						}
						position++
					}
				l260:
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('I') {
							goto l259
						}
						position++
					}
				l262:
					{
						position264, tokenIndex264 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l265
						}
						position++
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if buffer[position] != rune('Z') {
							goto l259
						}
						position++
					}
				l264:
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('E') {
							goto l259
						}
						position++
					}
				l266:
					goto l149
				l259:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l268
					}
					position++
					{
						position269, tokenIndex269 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l270
						}
						position++
						goto l269
					l270:
						position, tokenIndex = position269, tokenIndex269
						if buffer[position] != rune('T') {
							goto l268
						}
						position++
					}
				l269:
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('Y') {
							goto l268
						}
						position++
					}
				l271:
					{
						position273, tokenIndex273 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l274
						}
						position++
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('P') {
							goto l268
						}
						position++
					}
				l273:
					{
						position275, tokenIndex275 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l276
						}
						position++
						goto l275
					l276:
						position, tokenIndex = position275, tokenIndex275
						if buffer[position] != rune('E') {
							goto l268
						}
						position++
					}
				l275:
					goto l149
				l268:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l277
					}
					position++
					{
						position278, tokenIndex278 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l279
						}
						position++
						goto l278
					l279:
						position, tokenIndex = position278, tokenIndex278
						if buffer[position] != rune('U') {
							goto l277
						}
						position++
					}
				l278:
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l281
						}
						position++
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('L') {
							goto l277
						}
						position++
					}
				l280:
					{
						position282, tokenIndex282 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l283
						}
						position++
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('E') {
							goto l277
						}
						position++
					}
				l282:
					{
						position284, tokenIndex284 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l285
						}
						position++
						goto l284
					l285:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('B') {
							goto l277
						}
						position++
					}
				l284:
					if buffer[position] != rune('1') {
						goto l277
					}
					position++
					if buffer[position] != rune('2') {
						goto l277
					}
					position++
					if buffer[position] != rune('8') {
						goto l277
					}
					position++
					goto l149
				l277:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					{
						position286, tokenIndex286 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l287
						}
						position++
						goto l286
					l287:
						position, tokenIndex = position286, tokenIndex286
						if buffer[position] != rune('S') {
							goto l147
						}
						position++
					}
				l286:
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('L') {
							goto l147
						}
						position++
					}
				l288:
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('E') {
							goto l147
						}
						position++
					}
				l290:
					{
						position292, tokenIndex292 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l293
						}
						position++
						goto l292
					l293:
						position, tokenIndex = position292, tokenIndex292
						if buffer[position] != rune('B') {
							goto l147
						}
						position++
					}
				l292:
					if buffer[position] != rune('1') {
						goto l147
					}
					position++
					if buffer[position] != rune('2') {
						goto l147
					}
					position++
					if buffer[position] != rune('8') {
						goto l147
					}
					position++
				}
			l149:
				add(ruleLabelContainingDirectiveName, position148)
			}
			memoize(13, position147, tokenIndex147, true)
			return true
		l147:
			memoize(13, position147, tokenIndex147, false)
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 14 SymbolArgs <- <(SymbolArg (WS? ',' WS? SymbolArg)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{14, position}]; ok {
				return memoizedResult(memoized)
			}
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if !_rules[ruleSymbolArg]() {
					goto l294
				}
			l296:
				{
					position297, tokenIndex297 := position, tokenIndex
					{
						position298, tokenIndex298 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l298
						}
						goto l299
					l298:
						position, tokenIndex = position298, tokenIndex298
					}
				l299:
					if buffer[position] != rune(',') {
						goto l297
					}
					position++
					{
						position300, tokenIndex300 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l300
						}
						goto l301
					l300:
						position, tokenIndex = position300, tokenIndex300
					}
				l301:
					if !_rules[ruleSymbolArg]() {
						goto l297
					}
					goto l296
				l297:
					position, tokenIndex = position297, tokenIndex297
				}
				add(ruleSymbolArgs, position295)
			}
			memoize(14, position294, tokenIndex294, true)
			return true
		l294:
			memoize(14, position294, tokenIndex294, false)
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 15 SymbolArg <- <SymbolExpr> */
		func() bool {
			if memoized, ok := memoization[memoKey{15, position}]; ok {
				return memoizedResult(memoized)
			}
			position302, tokenIndex302 := position, tokenIndex
			{
				position303 := position
				if !_rules[ruleSymbolExpr]() {
					goto l302
				}
				add(ruleSymbolArg, position303)
			}
			memoize(15, position302, tokenIndex302, true)
			return true
		l302:
			memoize(15, position302, tokenIndex302, false)
			position, tokenIndex = position302, tokenIndex302
			return false
		},
		/* 16 SymbolExpr <- <(SymbolAtom (WS? SymbolOperator WS? SymbolExpr)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{16, position}]; ok {
				return memoizedResult(memoized)
			}
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				if !_rules[ruleSymbolAtom]() {
					goto l304
				}
				{
					position306, tokenIndex306 := position, tokenIndex
					{
						position308, tokenIndex308 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l308
						}
						goto l309
					l308:
						position, tokenIndex = position308, tokenIndex308
					}
				l309:
					if !_rules[ruleSymbolOperator]() {
						goto l306
					}
					{
						position310, tokenIndex310 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l310
						}
						goto l311
					l310:
						position, tokenIndex = position310, tokenIndex310
					}
				l311:
					if !_rules[ruleSymbolExpr]() {
						goto l306
					}
					goto l307
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
			l307:
				add(ruleSymbolExpr, position305)
			}
			memoize(16, position304, tokenIndex304, true)
			return true
		l304:
			memoize(16, position304, tokenIndex304, false)
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 17 SymbolAtom <- <(LocalLabelRef / Offset / SymbolType / (LocalSymbol TCMarker?) / (SymbolName Offset) / (SymbolName TCMarker?) / Dot / (OpenParen WS? SymbolExpr WS? CloseParen))> */
		func() bool {
			if memoized, ok := memoization[memoKey{17, position}]; ok {
				return memoizedResult(memoized)
			}
			position312, tokenIndex312 := position, tokenIndex
			{
				position313 := position
				{
					position314, tokenIndex314 := position, tokenIndex
					if !_rules[ruleLocalLabelRef]() {
						goto l315
					}
					goto l314
				l315:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleOffset]() {
						goto l316
					}
					goto l314
				l316:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSymbolType]() {
						goto l317
					}
					goto l314
				l317:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleLocalSymbol]() {
						goto l318
					}
					{
						position319, tokenIndex319 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l319
						}
						goto l320
					l319:
						position, tokenIndex = position319, tokenIndex319
					}
				l320:
					goto l314
				l318:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSymbolName]() {
						goto l321
					}
					if !_rules[ruleOffset]() {
						goto l321
					}
					goto l314
				l321:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSymbolName]() {
						goto l322
					}
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l323
						}
						goto l324
					l323:
						position, tokenIndex = position323, tokenIndex323
					}
				l324:
					goto l314
				l322:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleDot]() {
						goto l325
					}
					goto l314
				l325:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleOpenParen]() {
						goto l312
					}
					{
						position326, tokenIndex326 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l326
						}
						goto l327
					l326:
						position, tokenIndex = position326, tokenIndex326
					}
				l327:
					if !_rules[ruleSymbolExpr]() {
						goto l312
					}
					{
						position328, tokenIndex328 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l328
						}
						goto l329
					l328:
						position, tokenIndex = position328, tokenIndex328
					}
				l329:
					if !_rules[ruleCloseParen]() {
						goto l312
					}
				}
			l314:
				add(ruleSymbolAtom, position313)
			}
			memoize(17, position312, tokenIndex312, true)
			return true
		l312:
			memoize(17, position312, tokenIndex312, false)
			position, tokenIndex = position312, tokenIndex312
			return false
		},
		/* 18 SymbolOperator <- <('+' / '-' / '|' / ('<' '<') / ('>' '>'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{18, position}]; ok {
				return memoizedResult(memoized)
			}
			position330, tokenIndex330 := position, tokenIndex
			{
				position331 := position
				{
					position332, tokenIndex332 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l333
					}
					position++
					goto l332
				l333:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('-') {
						goto l334
					}
					position++
					goto l332
				l334:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('|') {
						goto l335
					}
					position++
					goto l332
				l335:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('<') {
						goto l336
					}
					position++
					if buffer[position] != rune('<') {
						goto l336
					}
					position++
					goto l332
				l336:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('>') {
						goto l330
					}
					position++
					if buffer[position] != rune('>') {
						goto l330
					}
					position++
				}
			l332:
				add(ruleSymbolOperator, position331)
			}
			memoize(18, position330, tokenIndex330, true)
			return true
		l330:
			memoize(18, position330, tokenIndex330, false)
			position, tokenIndex = position330, tokenIndex330
			return false
		},
		/* 19 OpenParen <- <'('> */
		func() bool {
			if memoized, ok := memoization[memoKey{19, position}]; ok {
				return memoizedResult(memoized)
			}
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				if buffer[position] != rune('(') {
					goto l337
				}
				position++
				add(ruleOpenParen, position338)
			}
			memoize(19, position337, tokenIndex337, true)
			return true
		l337:
			memoize(19, position337, tokenIndex337, false)
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 20 CloseParen <- <')'> */
		func() bool {
			if memoized, ok := memoization[memoKey{20, position}]; ok {
				return memoizedResult(memoized)
			}
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if buffer[position] != rune(')') {
					goto l339
				}
				position++
				add(ruleCloseParen, position340)
			}
			memoize(20, position339, tokenIndex339, true)
			return true
		l339:
			memoize(20, position339, tokenIndex339, false)
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 21 SymbolType <- <(('@' / '%') (('f' 'u' 'n' 'c' 't' 'i' 'o' 'n') / ('o' 'b' 'j' 'e' 'c' 't')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{21, position}]; ok {
				return memoizedResult(memoized)
			}
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				{
					position343, tokenIndex343 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l344
					}
					position++
					goto l343
				l344:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('%') {
						goto l341
					}
					position++
				}
			l343:
				{
					position345, tokenIndex345 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l346
					}
					position++
					if buffer[position] != rune('u') {
						goto l346
					}
					position++
					if buffer[position] != rune('n') {
						goto l346
					}
					position++
					if buffer[position] != rune('c') {
						goto l346
					}
					position++
					if buffer[position] != rune('t') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('o') {
						goto l346
					}
					position++
					if buffer[position] != rune('n') {
						goto l346
					}
					position++
					goto l345
				l346:
					position, tokenIndex = position345, tokenIndex345
					if buffer[position] != rune('o') {
						goto l341
					}
					position++
					if buffer[position] != rune('b') {
						goto l341
					}
					position++
					if buffer[position] != rune('j') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('c') {
						goto l341
					}
					position++
					if buffer[position] != rune('t') {
						goto l341
					}
					position++
				}
			l345:
				add(ruleSymbolType, position342)
			}
			memoize(21, position341, tokenIndex341, true)
			return true
		l341:
			memoize(21, position341, tokenIndex341, false)
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 22 Dot <- <'.'> */
		func() bool {
			if memoized, ok := memoization[memoKey{22, position}]; ok {
				return memoizedResult(memoized)
			}
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				if buffer[position] != rune('.') {
					goto l347
				}
				position++
				add(ruleDot, position348)
			}
			memoize(22, position347, tokenIndex347, true)
			return true
		l347:
			memoize(22, position347, tokenIndex347, false)
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 23 TCMarker <- <('[' 'T' 'C' ']')> */
		func() bool {
			if memoized, ok := memoization[memoKey{23, position}]; ok {
				return memoizedResult(memoized)
			}
			position349, tokenIndex349 := position, tokenIndex
			{
				position350 := position
				if buffer[position] != rune('[') {
					goto l349
				}
				position++
				if buffer[position] != rune('T') {
					goto l349
				}
				position++
				if buffer[position] != rune('C') {
					goto l349
				}
				position++
				if buffer[position] != rune(']') {
					goto l349
				}
				position++
				add(ruleTCMarker, position350)
			}
			memoize(23, position349, tokenIndex349, true)
			return true
		l349:
			memoize(23, position349, tokenIndex349, false)
			position, tokenIndex = position349, tokenIndex349
			return false
		},
		/* 24 EscapedChar <- <('\\' .)> */
		func() bool {
			if memoized, ok := memoization[memoKey{24, position}]; ok {
				return memoizedResult(memoized)
			}
			position351, tokenIndex351 := position, tokenIndex
			{
				position352 := position
				if buffer[position] != rune('\\') {
					goto l351
				}
				position++
				if !matchDot() {
					goto l351
				}
				add(ruleEscapedChar, position352)
			}
			memoize(24, position351, tokenIndex351, true)
			return true
		l351:
			memoize(24, position351, tokenIndex351, false)
			position, tokenIndex = position351, tokenIndex351
			return false
		},
		/* 25 WS <- <(' ' / '\t')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{25, position}]; ok {
				return memoizedResult(memoized)
			}
			position353, tokenIndex353 := position, tokenIndex
			{
				position354 := position
				{
					position357, tokenIndex357 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l358
					}
					position++
					goto l357
				l358:
					position, tokenIndex = position357, tokenIndex357
					if buffer[position] != rune('\t') {
						goto l353
					}
					position++
				}
			l357:
			l355:
				{
					position356, tokenIndex356 := position, tokenIndex
					{
						position359, tokenIndex359 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if buffer[position] != rune('\t') {
							goto l356
						}
						position++
					}
				l359:
					goto l355
				l356:
					position, tokenIndex = position356, tokenIndex356
				}
				add(ruleWS, position354)
			}
			memoize(25, position353, tokenIndex353, true)
			return true
		l353:
			memoize(25, position353, tokenIndex353, false)
			position, tokenIndex = position353, tokenIndex353
			return false
		},
		/* 26 Comment <- <((('/' '/') / '#') (!'\n' .)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{26, position}]; ok {
				return memoizedResult(memoized)
			}
			position361, tokenIndex361 := position, tokenIndex
			{
				position362 := position
				{
					position363, tokenIndex363 := position, tokenIndex
					if buffer[position] != rune('/') {
						goto l364
					}
					position++
					if buffer[position] != rune('/') {
						goto l364
					}
					position++
					goto l363
				l364:
					position, tokenIndex = position363, tokenIndex363
					if buffer[position] != rune('#') {
						goto l361
					}
					position++
				}
			l363:
			l365:
				{
					position366, tokenIndex366 := position, tokenIndex
					{
						position367, tokenIndex367 := position, tokenIndex
						if buffer[position] != rune('\n') {
							goto l367
						}
						position++
						goto l366
					l367:
						position, tokenIndex = position367, tokenIndex367
					}
					if !matchDot() {
						goto l366
					}
					goto l365
				l366:
					position, tokenIndex = position366, tokenIndex366
				}
				add(ruleComment, position362)
			}
			memoize(26, position361, tokenIndex361, true)
			return true
		l361:
			memoize(26, position361, tokenIndex361, false)
			position, tokenIndex = position361, tokenIndex361
			return false
		},
		/* 27 Label <- <((LocalSymbol / LocalLabel / SymbolName) ':')> */
		func() bool {
			if memoized, ok := memoization[memoKey{27, position}]; ok {
				return memoizedResult(memoized)
			}
			position368, tokenIndex368 := position, tokenIndex
			{
				position369 := position
				{
					position370, tokenIndex370 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l371
					}
					goto l370
				l371:
					position, tokenIndex = position370, tokenIndex370
					if !_rules[ruleLocalLabel]() {
						goto l372
					}
					goto l370
				l372:
					position, tokenIndex = position370, tokenIndex370
					if !_rules[ruleSymbolName]() {
						goto l368
					}
				}
			l370:
				if buffer[position] != rune(':') {
					goto l368
				}
				position++
				add(ruleLabel, position369)
			}
			memoize(27, position368, tokenIndex368, true)
			return true
		l368:
			memoize(27, position368, tokenIndex368, false)
			position, tokenIndex = position368, tokenIndex368
			return false
		},
		/* 28 SymbolName <- <(([a-z] / [A-Z] / '.' / '_') ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]) / '$' / '_')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{28, position}]; ok {
				return memoizedResult(memoized)
			}
			position373, tokenIndex373 := position, tokenIndex
			{
				position374 := position
				{
					position375, tokenIndex375 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l376
					}
					position++
					goto l375
				l376:
					position, tokenIndex = position375, tokenIndex375
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l377
					}
					position++
					goto l375
				l377:
					position, tokenIndex = position375, tokenIndex375
					if buffer[position] != rune('.') {
						goto l378
					}
					position++
					goto l375
				l378:
					position, tokenIndex = position375, tokenIndex375
					if buffer[position] != rune('_') {
						goto l373
					}
					position++
				}
			l375:
			l379:
				{
					position380, tokenIndex380 := position, tokenIndex
					{
						position381, tokenIndex381 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l382
						}
						position++
						goto l381
					l382:
						position, tokenIndex = position381, tokenIndex381
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l383
						}
						position++
						goto l381
					l383:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('.') {
							goto l384
						}
						position++
						goto l381
					l384:
						position, tokenIndex = position381, tokenIndex381
						{
							position386, tokenIndex386 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l387
							}
							position++
							goto l386
						l387:
							position, tokenIndex = position386, tokenIndex386
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l385
							}
							position++
						}
					l386:
						goto l381
					l385:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('$') {
							goto l388
						}
						position++
						goto l381
					l388:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('_') {
							goto l380
						}
						position++
					}
				l381:
					goto l379
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
				add(ruleSymbolName, position374)
			}
			memoize(28, position373, tokenIndex373, true)
			return true
		l373:
			memoize(28, position373, tokenIndex373, false)
			position, tokenIndex = position373, tokenIndex373
			return false
		},
		/* 29 LocalSymbol <- <('.' 'L' ([a-z] / [A-Z] / ([a-z] / [A-Z]) / '.' / ([0-9] / [0-9]) / '$' / '_')+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{29, position}]; ok {
				return memoizedResult(memoized)
			}
			position389, tokenIndex389 := position, tokenIndex
			{
				position390 := position
				if buffer[position] != rune('.') {
					goto l389
				}
				position++
				if buffer[position] != rune('L') {
					goto l389
				}
				position++
				{
					position393, tokenIndex393 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l394
					}
					position++
					goto l393
				l394:
					position, tokenIndex = position393, tokenIndex393
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l395
					}
					position++
					goto l393
				l395:
					position, tokenIndex = position393, tokenIndex393
					{
						position397, tokenIndex397 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l398
						}
						position++
						goto l397
					l398:
						position, tokenIndex = position397, tokenIndex397
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l396
						}
						position++
					}
				l397:
					goto l393
				l396:
					position, tokenIndex = position393, tokenIndex393
					if buffer[position] != rune('.') {
						goto l399
					}
					position++
					goto l393
				l399:
					position, tokenIndex = position393, tokenIndex393
					{
						position401, tokenIndex401 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l402
						}
						position++
						goto l401
					l402:
						position, tokenIndex = position401, tokenIndex401
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l400
						}
						position++
					}
				l401:
					goto l393
				l400:
					position, tokenIndex = position393, tokenIndex393
					if buffer[position] != rune('$') {
						goto l403
					}
					position++
					goto l393
				l403:
					position, tokenIndex = position393, tokenIndex393
					if buffer[position] != rune('_') {
						goto l389
					}
					position++
				}
			l393:
			l391:
				{
					position392, tokenIndex392 := position, tokenIndex
					{
						position404, tokenIndex404 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l405
						}
						position++
						goto l404
					l405:
						position, tokenIndex = position404, tokenIndex404
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l406
						}
						position++
						goto l404
					l406:
						position, tokenIndex = position404, tokenIndex404
						{
							position408, tokenIndex408 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l409
							}
							position++
							goto l408
						l409:
							position, tokenIndex = position408, tokenIndex408
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l407
							}
							position++
						}
					l408:
						goto l404
					l407:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('.') {
							goto l410
						}
						position++
						goto l404
					l410:
						position, tokenIndex = position404, tokenIndex404
						{
							position412, tokenIndex412 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l413
							}
							position++
							goto l412
						l413:
							position, tokenIndex = position412, tokenIndex412
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l411
							}
							position++
						}
					l412:
						goto l404
					l411:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('$') {
							goto l414
						}
						position++
						goto l404
					l414:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('_') {
							goto l392
						}
						position++
					}
				l404:
					goto l391
				l392:
					position, tokenIndex = position392, tokenIndex392
				}
				add(ruleLocalSymbol, position390)
			}
			memoize(29, position389, tokenIndex389, true)
			return true
		l389:
			memoize(29, position389, tokenIndex389, false)
			position, tokenIndex = position389, tokenIndex389
			return false
		},
		/* 30 LocalLabel <- <([0-9] ([0-9] / '$')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{30, position}]; ok {
				return memoizedResult(memoized)
			}
			position415, tokenIndex415 := position, tokenIndex
			{
				position416 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l415
				}
				position++
			l417:
				{
					position418, tokenIndex418 := position, tokenIndex
					{
						position419, tokenIndex419 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l420
						}
						position++
						goto l419
					l420:
						position, tokenIndex = position419, tokenIndex419
						if buffer[position] != rune('$') {
							goto l418
						}
						position++
					}
				l419:
					goto l417
				l418:
					position, tokenIndex = position418, tokenIndex418
				}
				add(ruleLocalLabel, position416)
			}
			memoize(30, position415, tokenIndex415, true)
			return true
		l415:
			memoize(30, position415, tokenIndex415, false)
			position, tokenIndex = position415, tokenIndex415
			return false
		},
		/* 31 LocalLabelRef <- <([0-9] ([0-9] / '$')* ('b' / 'f'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{31, position}]; ok {
				return memoizedResult(memoized)
			}
			position421, tokenIndex421 := position, tokenIndex
			{
				position422 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l421
				}
				position++
			l423:
				{
					position424, tokenIndex424 := position, tokenIndex
					{
						position425, tokenIndex425 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l426
						}
						position++
						goto l425
					l426:
						position, tokenIndex = position425, tokenIndex425
						if buffer[position] != rune('$') {
							goto l424
						}
						position++
					}
				l425:
					goto l423
				l424:
					position, tokenIndex = position424, tokenIndex424
				}
				{
					position427, tokenIndex427 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l428
					}
					position++
					goto l427
				l428:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('f') {
						goto l421
					}
					position++
				}
			l427:
				add(ruleLocalLabelRef, position422)
			}
			memoize(31, position421, tokenIndex421, true)
			return true
		l421:
			memoize(31, position421, tokenIndex421, false)
			position, tokenIndex = position421, tokenIndex421
			return false
		},
		/* 32 Instruction <- <(InstructionName (WS InstructionArg (WS? ',' WS? InstructionArg)*)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{32, position}]; ok {
				return memoizedResult(memoized)
			}
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				if !_rules[ruleInstructionName]() {
					goto l429
				}
			l431:
				{
					position432, tokenIndex432 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l432
					}
					if !_rules[ruleInstructionArg]() {
						goto l432
					}
				l433:
					{
						position434, tokenIndex434 := position, tokenIndex
						{
							position435, tokenIndex435 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l435
							}
							goto l436
						l435:
							position, tokenIndex = position435, tokenIndex435
						}
					l436:
						if buffer[position] != rune(',') {
							goto l434
						}
						position++
						{
							position437, tokenIndex437 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l437
							}
							goto l438
						l437:
							position, tokenIndex = position437, tokenIndex437
						}
					l438:
						if !_rules[ruleInstructionArg]() {
							goto l434
						}
						goto l433
					l434:
						position, tokenIndex = position434, tokenIndex434
					}
					goto l431
				l432:
					position, tokenIndex = position432, tokenIndex432
				}
				add(ruleInstruction, position430)
			}
			memoize(32, position429, tokenIndex429, true)
			return true
		l429:
			memoize(32, position429, tokenIndex429, false)
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 33 InstructionName <- <(([a-z] / [A-Z]) ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]))* ('.' / '+' / '-')?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{33, position}]; ok {
				return memoizedResult(memoized)
			}
			position439, tokenIndex439 := position, tokenIndex
			{
				position440 := position
				{
					position441, tokenIndex441 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l442
					}
					position++
					goto l441
				l442:
					position, tokenIndex = position441, tokenIndex441
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l439
					}
					position++
				}
			l441:
			l443:
				{
					position444, tokenIndex444 := position, tokenIndex
					{
						position445, tokenIndex445 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l446
						}
						position++
						goto l445
					l446:
						position, tokenIndex = position445, tokenIndex445
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l447
						}
						position++
						goto l445
					l447:
						position, tokenIndex = position445, tokenIndex445
						if buffer[position] != rune('.') {
							goto l448
						}
						position++
						goto l445
					l448:
						position, tokenIndex = position445, tokenIndex445
						{
							position449, tokenIndex449 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l450
							}
							position++
							goto l449
						l450:
							position, tokenIndex = position449, tokenIndex449
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l444
							}
							position++
						}
					l449:
					}
				l445:
					goto l443
				l444:
					position, tokenIndex = position444, tokenIndex444
				}
				{
					position451, tokenIndex451 := position, tokenIndex
					{
						position453, tokenIndex453 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l454
						}
						position++
						goto l453
					l454:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('+') {
							goto l455
						}
						position++
						goto l453
					l455:
						position, tokenIndex = position453, tokenIndex453
						if buffer[position] != rune('-') {
							goto l451
						}
						position++
					}
				l453:
					goto l452
				l451:
					position, tokenIndex = position451, tokenIndex451
				}
			l452:
				add(ruleInstructionName, position440)
			}
			memoize(33, position439, tokenIndex439, true)
			return true
		l439:
			memoize(33, position439, tokenIndex439, false)
			position, tokenIndex = position439, tokenIndex439
			return false
		},
		/* 34 InstructionArg <- <(IndirectionIndicator? (ARMConstantTweak / RegisterOrConstant / LocalLabelRef / TOCRefHigh / TOCRefLow / GOTLocation / GOTSymbolOffset / MemoryRef) AVX512Token*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{34, position}]; ok {
				return memoizedResult(memoized)
			}
			position456, tokenIndex456 := position, tokenIndex
			{
				position457 := position
				{
					position458, tokenIndex458 := position, tokenIndex
					if !_rules[ruleIndirectionIndicator]() {
						goto l458
					}
					goto l459
				l458:
					position, tokenIndex = position458, tokenIndex458
				}
			l459:
				{
					position460, tokenIndex460 := position, tokenIndex
					if !_rules[ruleARMConstantTweak]() {
						goto l461
					}
					goto l460
				l461:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleRegisterOrConstant]() {
						goto l462
					}
					goto l460
				l462:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleLocalLabelRef]() {
						goto l463
					}
					goto l460
				l463:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleTOCRefHigh]() {
						goto l464
					}
					goto l460
				l464:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleTOCRefLow]() {
						goto l465
					}
					goto l460
				l465:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleGOTLocation]() {
						goto l466
					}
					goto l460
				l466:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleGOTSymbolOffset]() {
						goto l467
					}
					goto l460
				l467:
					position, tokenIndex = position460, tokenIndex460
					if !_rules[ruleMemoryRef]() {
						goto l456
					}
				}
			l460:
			l468:
				{
					position469, tokenIndex469 := position, tokenIndex
					if !_rules[ruleAVX512Token]() {
						goto l469
					}
					goto l468
				l469:
					position, tokenIndex = position469, tokenIndex469
				}
				add(ruleInstructionArg, position457)
			}
			memoize(34, position456, tokenIndex456, true)
			return true
		l456:
			memoize(34, position456, tokenIndex456, false)
			position, tokenIndex = position456, tokenIndex456
			return false
		},
		/* 35 GOTLocation <- <('$' '_' 'G' 'L' 'O' 'B' 'A' 'L' '_' 'O' 'F' 'F' 'S' 'E' 'T' '_' 'T' 'A' 'B' 'L' 'E' '_' '-' LocalSymbol)> */
		func() bool {
			if memoized, ok := memoization[memoKey{35, position}]; ok {
				return memoizedResult(memoized)
			}
			position470, tokenIndex470 := position, tokenIndex
			{
				position471 := position
				if buffer[position] != rune('$') {
					goto l470
				}
				position++
				if buffer[position] != rune('_') {
					goto l470
				}
				position++
				if buffer[position] != rune('G') {
					goto l470
				}
				position++
				if buffer[position] != rune('L') {
					goto l470
				}
				position++
				if buffer[position] != rune('O') {
					goto l470
				}
				position++
				if buffer[position] != rune('B') {
					goto l470
				}
				position++
				if buffer[position] != rune('A') {
					goto l470
				}
				position++
				if buffer[position] != rune('L') {
					goto l470
				}
				position++
				if buffer[position] != rune('_') {
					goto l470
				}
				position++
				if buffer[position] != rune('O') {
					goto l470
				}
				position++
				if buffer[position] != rune('F') {
					goto l470
				}
				position++
				if buffer[position] != rune('F') {
					goto l470
				}
				position++
				if buffer[position] != rune('S') {
					goto l470
				}
				position++
				if buffer[position] != rune('E') {
					goto l470
				}
				position++
				if buffer[position] != rune('T') {
					goto l470
				}
				position++
				if buffer[position] != rune('_') {
					goto l470
				}
				position++
				if buffer[position] != rune('T') {
					goto l470
				}
				position++
				if buffer[position] != rune('A') {
					goto l470
				}
				position++
				if buffer[position] != rune('B') {
					goto l470
				}
				position++
				if buffer[position] != rune('L') {
					goto l470
				}
				position++
				if buffer[position] != rune('E') {
					goto l470
				}
				position++
				if buffer[position] != rune('_') {
					goto l470
				}
				position++
				if buffer[position] != rune('-') {
					goto l470
				}
				position++
				if !_rules[ruleLocalSymbol]() {
					goto l470
				}
				add(ruleGOTLocation, position471)
			}
			memoize(35, position470, tokenIndex470, true)
			return true
		l470:
			memoize(35, position470, tokenIndex470, false)
			position, tokenIndex = position470, tokenIndex470
			return false
		},
		/* 36 GOTSymbolOffset <- <(('$' SymbolName ('@' 'G' 'O' 'T') ('O' 'F' 'F')?) / (':' ('g' / 'G') ('o' / 'O') ('t' / 'T') ':' SymbolName))> */
		func() bool {
			if memoized, ok := memoization[memoKey{36, position}]; ok {
				return memoizedResult(memoized)
			}
			position472, tokenIndex472 := position, tokenIndex
			{
				position473 := position
				{
					position474, tokenIndex474 := position, tokenIndex
					if buffer[position] != rune('$') {
						goto l475
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l475
					}
					if buffer[position] != rune('@') {
						goto l475
					}
					position++
					if buffer[position] != rune('G') {
						goto l475
					}
					position++
					if buffer[position] != rune('O') {
						goto l475
					}
					position++
					if buffer[position] != rune('T') {
						goto l475
					}
					position++
					{
						position476, tokenIndex476 := position, tokenIndex
						if buffer[position] != rune('O') {
							goto l476
						}
						position++
						if buffer[position] != rune('F') {
							goto l476
						}
						position++
						if buffer[position] != rune('F') {
							goto l476
						}
						position++
						goto l477
					l476:
						position, tokenIndex = position476, tokenIndex476
					}
				l477:
					goto l474
				l475:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune(':') {
						goto l472
					}
					position++
					{
						position478, tokenIndex478 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l479
						}
						position++
						goto l478
					l479:
						position, tokenIndex = position478, tokenIndex478
						if buffer[position] != rune('G') {
							goto l472
						}
						position++
					}
				l478:
					{
						position480, tokenIndex480 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l481
						}
						position++
						goto l480
					l481:
						position, tokenIndex = position480, tokenIndex480
						if buffer[position] != rune('O') {
							goto l472
						}
						position++
					}
				l480:
					{
						position482, tokenIndex482 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l483
						}
						position++
						goto l482
					l483:
						position, tokenIndex = position482, tokenIndex482
						if buffer[position] != rune('T') {
							goto l472
						}
						position++
					}
				l482:
					if buffer[position] != rune(':') {
						goto l472
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l472
					}
				}
			l474:
				add(ruleGOTSymbolOffset, position473)
			}
			memoize(36, position472, tokenIndex472, true)
			return true
		l472:
			memoize(36, position472, tokenIndex472, false)
			position, tokenIndex = position472, tokenIndex472
			return false
		},
		/* 37 AVX512Token <- <(WS? '{' '%'? ([0-9] / [a-z])* '}')> */
		func() bool {
			if memoized, ok := memoization[memoKey{37, position}]; ok {
				return memoizedResult(memoized)
			}
			position484, tokenIndex484 := position, tokenIndex
			{
				position485 := position
				{
					position486, tokenIndex486 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l486
					}
					goto l487
				l486:
					position, tokenIndex = position486, tokenIndex486
				}
			l487:
				if buffer[position] != rune('{') {
					goto l484
				}
				position++
				{
					position488, tokenIndex488 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l488
					}
					position++
					goto l489
				l488:
					position, tokenIndex = position488, tokenIndex488
				}
			l489:
			l490:
				{
					position491, tokenIndex491 := position, tokenIndex
					{
						position492, tokenIndex492 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l493
						}
						position++
						goto l492
					l493:
						position, tokenIndex = position492, tokenIndex492
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l491
						}
						position++
					}
				l492:
					goto l490
				l491:
					position, tokenIndex = position491, tokenIndex491
				}
				if buffer[position] != rune('}') {
					goto l484
				}
				position++
				add(ruleAVX512Token, position485)
			}
			memoize(37, position484, tokenIndex484, true)
			return true
		l484:
			memoize(37, position484, tokenIndex484, false)
			position, tokenIndex = position484, tokenIndex484
			return false
		},
		/* 38 TOCRefHigh <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('h' / 'H') ('a' / 'A')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{38, position}]; ok {
				return memoizedResult(memoized)
			}
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				if buffer[position] != rune('.') {
					goto l494
				}
				position++
				if buffer[position] != rune('T') {
					goto l494
				}
				position++
				if buffer[position] != rune('O') {
					goto l494
				}
				position++
				if buffer[position] != rune('C') {
					goto l494
				}
				position++
				if buffer[position] != rune('.') {
					goto l494
				}
				position++
				if buffer[position] != rune('-') {
					goto l494
				}
				position++
				{
					position496, tokenIndex496 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l497
					}
					position++
					if buffer[position] != rune('b') {
						goto l497
					}
					position++
					goto l496
				l497:
					position, tokenIndex = position496, tokenIndex496
					if buffer[position] != rune('.') {
						goto l494
					}
					position++
					if buffer[position] != rune('L') {
						goto l494
					}
					position++
					{
						position500, tokenIndex500 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l501
						}
						position++
						goto l500
					l501:
						position, tokenIndex = position500, tokenIndex500
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l502
						}
						position++
						goto l500
					l502:
						position, tokenIndex = position500, tokenIndex500
						if buffer[position] != rune('_') {
							goto l503
						}
						position++
						goto l500
					l503:
						position, tokenIndex = position500, tokenIndex500
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l494
						}
						position++
					}
				l500:
				l498:
					{
						position499, tokenIndex499 := position, tokenIndex
						{
							position504, tokenIndex504 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l505
							}
							position++
							goto l504
						l505:
							position, tokenIndex = position504, tokenIndex504
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l506
							}
							position++
							goto l504
						l506:
							position, tokenIndex = position504, tokenIndex504
							if buffer[position] != rune('_') {
								goto l507
							}
							position++
							goto l504
						l507:
							position, tokenIndex = position504, tokenIndex504
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l499
							}
							position++
						}
					l504:
						goto l498
					l499:
						position, tokenIndex = position499, tokenIndex499
					}
				}
			l496:
				if buffer[position] != rune('@') {
					goto l494
				}
				position++
				{
					position508, tokenIndex508 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l509
					}
					position++
					goto l508
				l509:
					position, tokenIndex = position508, tokenIndex508
					if buffer[position] != rune('H') {
						goto l494
					}
					position++
				}
			l508:
				{
					position510, tokenIndex510 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l511
					}
					position++
					goto l510
				l511:
					position, tokenIndex = position510, tokenIndex510
					if buffer[position] != rune('A') {
						goto l494
					}
					position++
				}
			l510:
				add(ruleTOCRefHigh, position495)
			}
			memoize(38, position494, tokenIndex494, true)
			return true
		l494:
			memoize(38, position494, tokenIndex494, false)
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 39 TOCRefLow <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('l' / 'L')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{39, position}]; ok {
				return memoizedResult(memoized)
			}
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				if buffer[position] != rune('.') {
					goto l512
				}
				position++
				if buffer[position] != rune('T') {
					goto l512
				}
				position++
				if buffer[position] != rune('O') {
					goto l512
				}
				position++
				if buffer[position] != rune('C') {
					goto l512
				}
				position++
				if buffer[position] != rune('.') {
					goto l512
				}
				position++
				if buffer[position] != rune('-') {
					goto l512
				}
				position++
				{
					position514, tokenIndex514 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l515
					}
					position++
					if buffer[position] != rune('b') {
						goto l515
					}
					position++
					goto l514
				l515:
					position, tokenIndex = position514, tokenIndex514
					if buffer[position] != rune('.') {
						goto l512
					}
					position++
					if buffer[position] != rune('L') {
						goto l512
					}
					position++
					{
						position518, tokenIndex518 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l519
						}
						position++
						goto l518
					l519:
						position, tokenIndex = position518, tokenIndex518
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l520
						}
						position++
						goto l518
					l520:
						position, tokenIndex = position518, tokenIndex518
						if buffer[position] != rune('_') {
							goto l521
						}
						position++
						goto l518
					l521:
						position, tokenIndex = position518, tokenIndex518
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l512
						}
						position++
					}
				l518:
				l516:
					{
						position517, tokenIndex517 := position, tokenIndex
						{
							position522, tokenIndex522 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l523
							}
							position++
							goto l522
						l523:
							position, tokenIndex = position522, tokenIndex522
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l524
							}
							position++
							goto l522
						l524:
							position, tokenIndex = position522, tokenIndex522
							if buffer[position] != rune('_') {
								goto l525
							}
							position++
							goto l522
						l525:
							position, tokenIndex = position522, tokenIndex522
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l517
							}
							position++
						}
					l522:
						goto l516
					l517:
						position, tokenIndex = position517, tokenIndex517
					}
				}
			l514:
				if buffer[position] != rune('@') {
					goto l512
				}
				position++
				{
					position526, tokenIndex526 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l527
					}
					position++
					goto l526
				l527:
					position, tokenIndex = position526, tokenIndex526
					if buffer[position] != rune('L') {
						goto l512
					}
					position++
				}
			l526:
				add(ruleTOCRefLow, position513)
			}
			memoize(39, position512, tokenIndex512, true)
			return true
		l512:
			memoize(39, position512, tokenIndex512, false)
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 40 IndirectionIndicator <- <'*'> */
		func() bool {
			if memoized, ok := memoization[memoKey{40, position}]; ok {
				return memoizedResult(memoized)
			}
			position528, tokenIndex528 := position, tokenIndex
			{
				position529 := position
				if buffer[position] != rune('*') {
					goto l528
				}
				position++
				add(ruleIndirectionIndicator, position529)
			}
			memoize(40, position528, tokenIndex528, true)
			return true
		l528:
			memoize(40, position528, tokenIndex528, false)
			position, tokenIndex = position528, tokenIndex528
			return false
		},
		/* 41 RegisterOrConstant <- <((('%' ([a-z] / [A-Z]) ([a-z] / [A-Z] / ([0-9] / [0-9]))*) / ('$'? ((Offset Offset) / Offset)) / ('#' Offset ('*' [0-9]+ ('-' [0-9] [0-9]*)?)?) / ('#' '~'? '(' [0-9] WS? ('<' '<') WS? [0-9] ')') / ARMRegister) !('f' / 'b' / ':' / '(' / '+' / '-'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{41, position}]; ok {
				return memoizedResult(memoized)
			}
			position530, tokenIndex530 := position, tokenIndex
			{
				position531 := position
				{
					position532, tokenIndex532 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l533
					}
					position++
					{
						position534, tokenIndex534 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l535
						}
						position++
						goto l534
					l535:
						position, tokenIndex = position534, tokenIndex534
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l533
						}
						position++
					}
				l534:
				l536:
					{
						position537, tokenIndex537 := position, tokenIndex
						{
							position538, tokenIndex538 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l539
							}
							position++
							goto l538
						l539:
							position, tokenIndex = position538, tokenIndex538
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l540
							}
							position++
							goto l538
						l540:
							position, tokenIndex = position538, tokenIndex538
							{
								position541, tokenIndex541 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l542
								}
								position++
								goto l541
							l542:
								position, tokenIndex = position541, tokenIndex541
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l537
								}
								position++
							}
						l541:
						}
					l538:
						goto l536
					l537:
						position, tokenIndex = position537, tokenIndex537
					}
					goto l532
				l533:
					position, tokenIndex = position532, tokenIndex532
					{
						position544, tokenIndex544 := position, tokenIndex
						if buffer[position] != rune('$') {
							goto l544
						}
						position++
						goto l545
					l544:
						position, tokenIndex = position544, tokenIndex544
					}
				l545:
					{
						position546, tokenIndex546 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l547
						}
						if !_rules[ruleOffset]() {
							goto l547
						}
						goto l546
					l547:
						position, tokenIndex = position546, tokenIndex546
						if !_rules[ruleOffset]() {
							goto l543
						}
					}
				l546:
					goto l532
				l543:
					position, tokenIndex = position532, tokenIndex532
					if buffer[position] != rune('#') {
						goto l548
					}
					position++
					if !_rules[ruleOffset]() {
						goto l548
					}
					{
						position549, tokenIndex549 := position, tokenIndex
						if buffer[position] != rune('*') {
							goto l549
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l549
						}
						position++
					l551:
						{
							position552, tokenIndex552 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l552
							}
							position++
							goto l551
						l552:
							position, tokenIndex = position552, tokenIndex552
						}
						{
							position553, tokenIndex553 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l553
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l553
							}
							position++
						l555:
							{
								position556, tokenIndex556 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l556
								}
								position++
								goto l555
							l556:
								position, tokenIndex = position556, tokenIndex556
							}
							goto l554
						l553:
							position, tokenIndex = position553, tokenIndex553
						}
					l554:
						goto l550
					l549:
						position, tokenIndex = position549, tokenIndex549
					}
				l550:
					goto l532
				l548:
					position, tokenIndex = position532, tokenIndex532
					if buffer[position] != rune('#') {
						goto l557
					}
					position++
					{
						position558, tokenIndex558 := position, tokenIndex
						if buffer[position] != rune('~') {
							goto l558
						}
						position++
						goto l559
					l558:
						position, tokenIndex = position558, tokenIndex558
					}
				l559:
					if buffer[position] != rune('(') {
						goto l557
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l557
					}
					position++
					{
						position560, tokenIndex560 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l560
						}
						goto l561
					l560:
						position, tokenIndex = position560, tokenIndex560
					}
				l561:
					if buffer[position] != rune('<') {
						goto l557
					}
					position++
					if buffer[position] != rune('<') {
						goto l557
					}
					position++
					{
						position562, tokenIndex562 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l562
						}
						goto l563
					l562:
						position, tokenIndex = position562, tokenIndex562
					}
				l563:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l557
					}
					position++
					if buffer[position] != rune(')') {
						goto l557
					}
					position++
					goto l532
				l557:
					position, tokenIndex = position532, tokenIndex532
					if !_rules[ruleARMRegister]() {
						goto l530
					}
				}
			l532:
				{
					position564, tokenIndex564 := position, tokenIndex
					{
						position565, tokenIndex565 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l566
						}
						position++
						goto l565
					l566:
						position, tokenIndex = position565, tokenIndex565
						if buffer[position] != rune('b') {
							goto l567
						}
						position++
						goto l565
					l567:
						position, tokenIndex = position565, tokenIndex565
						if buffer[position] != rune(':') {
							goto l568
						}
						position++
						goto l565
					l568:
						position, tokenIndex = position565, tokenIndex565
						if buffer[position] != rune('(') {
							goto l569
						}
						position++
						goto l565
					l569:
						position, tokenIndex = position565, tokenIndex565
						if buffer[position] != rune('+') {
							goto l570
						}
						position++
						goto l565
					l570:
						position, tokenIndex = position565, tokenIndex565
						if buffer[position] != rune('-') {
							goto l564
						}
						position++
					}
				l565:
					goto l530
				l564:
					position, tokenIndex = position564, tokenIndex564
				}
				add(ruleRegisterOrConstant, position531)
			}
			memoize(41, position530, tokenIndex530, true)
			return true
		l530:
			memoize(41, position530, tokenIndex530, false)
			position, tokenIndex = position530, tokenIndex530
			return false
		},
		/* 42 ARMConstantTweak <- <(((('u' / 's') (('x' / 'X') ('t' / 'T')) ('x' / 'w' / 'h' / 'b')) / (('l' / 'L') ('s' / 'S') ('l' / 'L')) / (('l' / 'L') ('s' / 'S') ('r' / 'R')) / (('r' / 'R') ('o' / 'O') ('r' / 'R')) / (('a' / 'A') ('s' / 'S') ('r' / 'R'))) (WS '#' Offset)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{42, position}]; ok {
				return memoizedResult(memoized)
			}
			position571, tokenIndex571 := position, tokenIndex
			{
				position572 := position
				{
					position573, tokenIndex573 := position, tokenIndex
					{
						position575, tokenIndex575 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l576
						}
						position++
						goto l575
					l576:
						position, tokenIndex = position575, tokenIndex575
						if buffer[position] != rune('s') {
							goto l574
						}
						position++
					}
				l575:
					{
						position577, tokenIndex577 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l578
						}
						position++
						goto l577
					l578:
						position, tokenIndex = position577, tokenIndex577
						if buffer[position] != rune('X') {
							goto l574
						}
						position++
					}
				l577:
					{
						position579, tokenIndex579 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l580
						}
						position++
						goto l579
					l580:
						position, tokenIndex = position579, tokenIndex579
						if buffer[position] != rune('T') {
							goto l574
						}
						position++
					}
				l579:
					{
						position581, tokenIndex581 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l582
						}
						position++
						goto l581
					l582:
						position, tokenIndex = position581, tokenIndex581
						if buffer[position] != rune('w') {
							goto l583
						}
						position++
						goto l581
					l583:
						position, tokenIndex = position581, tokenIndex581
						if buffer[position] != rune('h') {
							goto l584
						}
						position++
						goto l581
					l584:
						position, tokenIndex = position581, tokenIndex581
						if buffer[position] != rune('b') {
							goto l574
						}
						position++
					}
				l581:
					goto l573
				l574:
					position, tokenIndex = position573, tokenIndex573
					{
						position586, tokenIndex586 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l587
						}
						position++
						goto l586
					l587:
						position, tokenIndex = position586, tokenIndex586
						if buffer[position] != rune('L') {
							goto l585
						}
						position++
					}
				l586:
					{
						position588, tokenIndex588 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l589
						}
						position++
						goto l588
					l589:
						position, tokenIndex = position588, tokenIndex588
						if buffer[position] != rune('S') {
							goto l585
						}
						position++
					}
				l588:
					{
						position590, tokenIndex590 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l591
						}
						position++
						goto l590
					l591:
						position, tokenIndex = position590, tokenIndex590
						if buffer[position] != rune('L') {
							goto l585
						}
						position++
					}
				l590:
					goto l573
				l585:
					position, tokenIndex = position573, tokenIndex573
					{
						position593, tokenIndex593 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l594
						}
						position++
						goto l593
					l594:
						position, tokenIndex = position593, tokenIndex593
						if buffer[position] != rune('L') {
							goto l592
						}
						position++
					}
				l593:
					{
						position595, tokenIndex595 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l596
						}
						position++
						goto l595
					l596:
						position, tokenIndex = position595, tokenIndex595
						if buffer[position] != rune('S') {
							goto l592
						}
						position++
					}
				l595:
					{
						position597, tokenIndex597 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l598
						}
						position++
						goto l597
					l598:
						position, tokenIndex = position597, tokenIndex597
						if buffer[position] != rune('R') {
							goto l592
						}
						position++
					}
				l597:
					goto l573
				l592:
					position, tokenIndex = position573, tokenIndex573
					{
						position600, tokenIndex600 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l601
						}
						position++
						goto l600
					l601:
						position, tokenIndex = position600, tokenIndex600
						if buffer[position] != rune('R') {
							goto l599
						}
						position++
					}
				l600:
					{
						position602, tokenIndex602 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l603
						}
						position++
						goto l602
					l603:
						position, tokenIndex = position602, tokenIndex602
						if buffer[position] != rune('O') {
							goto l599
						}
						position++
					}
				l602:
					{
						position604, tokenIndex604 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l605
						}
						position++
						goto l604
					l605:
						position, tokenIndex = position604, tokenIndex604
						if buffer[position] != rune('R') {
							goto l599
						}
						position++
					}
				l604:
					goto l573
				l599:
					position, tokenIndex = position573, tokenIndex573
					{
						position606, tokenIndex606 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l607
						}
						position++
						goto l606
					l607:
						position, tokenIndex = position606, tokenIndex606
						if buffer[position] != rune('A') {
							goto l571
						}
						position++
					}
				l606:
					{
						position608, tokenIndex608 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l609
						}
						position++
						goto l608
					l609:
						position, tokenIndex = position608, tokenIndex608
						if buffer[position] != rune('S') {
							goto l571
						}
						position++
					}
				l608:
					{
						position610, tokenIndex610 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l611
						}
						position++
						goto l610
					l611:
						position, tokenIndex = position610, tokenIndex610
						if buffer[position] != rune('R') {
							goto l571
						}
						position++
					}
				l610:
				}
			l573:
				{
					position612, tokenIndex612 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l612
					}
					if buffer[position] != rune('#') {
						goto l612
					}
					position++
					if !_rules[ruleOffset]() {
						goto l612
					}
					goto l613
				l612:
					position, tokenIndex = position612, tokenIndex612
				}
			l613:
				add(ruleARMConstantTweak, position572)
			}
			memoize(42, position571, tokenIndex571, true)
			return true
		l571:
			memoize(42, position571, tokenIndex571, false)
			position, tokenIndex = position571, tokenIndex571
			return false
		},
		/* 43 ARMRegister <- <((('s' / 'S') ('p' / 'P')) / (('x' / 'w' / 'd' / 'q' / 's' / 'h' / 'b') [0-9] [0-9]?) / (('x' / 'X') ('z' / 'Z') ('r' / 'R')) / (('w' / 'W') ('z' / 'Z') ('r' / 'R')) / (('n' / 'N') ('z' / 'Z') ('c' / 'C') ('v' / 'V')) / ARMVectorRegister / ('{' WS? ARMVectorRegister (',' WS? ARMVectorRegister)* WS? '}' ('[' [0-9] [0-9]? ']')?))> */
		func() bool {
			if memoized, ok := memoization[memoKey{43, position}]; ok {
				return memoizedResult(memoized)
			}
			position614, tokenIndex614 := position, tokenIndex
			{
				position615 := position
				{
					position616, tokenIndex616 := position, tokenIndex
					{
						position618, tokenIndex618 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l619
						}
						position++
						goto l618
					l619:
						position, tokenIndex = position618, tokenIndex618
						if buffer[position] != rune('S') {
							goto l617
						}
						position++
					}
				l618:
					{
						position620, tokenIndex620 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l621
						}
						position++
						goto l620
					l621:
						position, tokenIndex = position620, tokenIndex620
						if buffer[position] != rune('P') {
							goto l617
						}
						position++
					}
				l620:
					goto l616
				l617:
					position, tokenIndex = position616, tokenIndex616
					{
						position623, tokenIndex623 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l624
						}
						position++
						goto l623
					l624:
						position, tokenIndex = position623, tokenIndex623
						if buffer[position] != rune('w') {
							goto l625
						}
						position++
						goto l623
					l625:
						position, tokenIndex = position623, tokenIndex623
						if buffer[position] != rune('d') {
							goto l626
						}
						position++
						goto l623
					l626:
						position, tokenIndex = position623, tokenIndex623
						if buffer[position] != rune('q') {
							goto l627
						}
						position++
						goto l623
					l627:
						position, tokenIndex = position623, tokenIndex623
						if buffer[position] != rune('s') {
							goto l628
						}
						position++
						goto l623
					l628:
						position, tokenIndex = position623, tokenIndex623
						if buffer[position] != rune('h') {
							goto l629
						}
						position++
						goto l623
					l629:
						position, tokenIndex = position623, tokenIndex623
						if buffer[position] != rune('b') {
							goto l622
						}
						position++
					}
				l623:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l622
					}
					position++
					{
						position630, tokenIndex630 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l630
						}
						position++
						goto l631
					l630:
						position, tokenIndex = position630, tokenIndex630
					}
				l631:
					goto l616
				l622:
					position, tokenIndex = position616, tokenIndex616
					{
						position633, tokenIndex633 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l634
						}
						position++
						goto l633
					l634:
						position, tokenIndex = position633, tokenIndex633
						if buffer[position] != rune('X') {
							goto l632
						}
						position++
					}
				l633:
					{
						position635, tokenIndex635 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l636
						}
						position++
						goto l635
					l636:
						position, tokenIndex = position635, tokenIndex635
						if buffer[position] != rune('Z') {
							goto l632
						}
						position++
					}
				l635:
					{
						position637, tokenIndex637 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l638
						}
						position++
						goto l637
					l638:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('R') {
							goto l632
						}
						position++
					}
				l637:
					goto l616
				l632:
					position, tokenIndex = position616, tokenIndex616
					{
						position640, tokenIndex640 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l641
						}
						position++
						goto l640
					l641:
						position, tokenIndex = position640, tokenIndex640
						if buffer[position] != rune('W') {
							goto l639
						}
						position++
					}
				l640:
					{
						position642, tokenIndex642 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l643
						}
						position++
						goto l642
					l643:
						position, tokenIndex = position642, tokenIndex642
						if buffer[position] != rune('Z') {
							goto l639
						}
						position++
					}
				l642:
					{
						position644, tokenIndex644 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l645
						}
						position++
						goto l644
					l645:
						position, tokenIndex = position644, tokenIndex644
						if buffer[position] != rune('R') {
							goto l639
						}
						position++
					}
				l644:
					goto l616
				l639:
					position, tokenIndex = position616, tokenIndex616
					{
						position647, tokenIndex647 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l648
						}
						position++
						goto l647
					l648:
						position, tokenIndex = position647, tokenIndex647
						if buffer[position] != rune('N') {
							goto l646
						}
						position++
					}
				l647:
					{
						position649, tokenIndex649 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l650
						}
						position++
						goto l649
					l650:
						position, tokenIndex = position649, tokenIndex649
						if buffer[position] != rune('Z') {
							goto l646
						}
						position++
					}
				l649:
					{
						position651, tokenIndex651 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l652
						}
						position++
						goto l651
					l652:
						position, tokenIndex = position651, tokenIndex651
						if buffer[position] != rune('C') {
							goto l646
						}
						position++
					}
				l651:
					{
						position653, tokenIndex653 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l654
						}
						position++
						goto l653
					l654:
						position, tokenIndex = position653, tokenIndex653
						if buffer[position] != rune('V') {
							goto l646
						}
						position++
					}
				l653:
					goto l616
				l646:
					position, tokenIndex = position616, tokenIndex616
					if !_rules[ruleARMVectorRegister]() {
						goto l655
					}
					goto l616
				l655:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('{') {
						goto l614
					}
					position++
					{
						position656, tokenIndex656 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l656
						}
						goto l657
					l656:
						position, tokenIndex = position656, tokenIndex656
					}
				l657:
					if !_rules[ruleARMVectorRegister]() {
						goto l614
					}
				l658:
					{
						position659, tokenIndex659 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l659
						}
						position++
						{
							position660, tokenIndex660 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l660
							}
							goto l661
						l660:
							position, tokenIndex = position660, tokenIndex660
						}
					l661:
						if !_rules[ruleARMVectorRegister]() {
							goto l659
						}
						goto l658
					l659:
						position, tokenIndex = position659, tokenIndex659
					}
					{
						position662, tokenIndex662 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l662
						}
						goto l663
					l662:
						position, tokenIndex = position662, tokenIndex662
					}
				l663:
					if buffer[position] != rune('}') {
						goto l614
					}
					position++
					{
						position664, tokenIndex664 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l664
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l664
						}
						position++
						{
							position666, tokenIndex666 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l666
							}
							position++
							goto l667
						l666:
							position, tokenIndex = position666, tokenIndex666
						}
					l667:
						if buffer[position] != rune(']') {
							goto l664
						}
						position++
						goto l665
					l664:
						position, tokenIndex = position664, tokenIndex664
					}
				l665:
				}
			l616:
				add(ruleARMRegister, position615)
			}
			memoize(43, position614, tokenIndex614, true)
			return true
		l614:
			memoize(43, position614, tokenIndex614, false)
			position, tokenIndex = position614, tokenIndex614
			return false
		},
		/* 44 ARMVectorRegister <- <(('v' / 'V') [0-9] [0-9]? ('.' [0-9]* ('b' / 's' / 'd' / 'h' / 'q') ('[' [0-9] [0-9]? ']')?)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{44, position}]; ok {
				return memoizedResult(memoized)
			}
			position668, tokenIndex668 := position, tokenIndex
			{
				position669 := position
				{
					position670, tokenIndex670 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l671
					}
					position++
					goto l670
				l671:
					position, tokenIndex = position670, tokenIndex670
					if buffer[position] != rune('V') {
						goto l668
					}
					position++
				}
			l670:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l668
				}
				position++
				{
					position672, tokenIndex672 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l672
					}
					position++
					goto l673
				l672:
					position, tokenIndex = position672, tokenIndex672
				}
			l673:
				{
					position674, tokenIndex674 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l674
					}
					position++
				l676:
					{
						position677, tokenIndex677 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l677
						}
						position++
						goto l676
					l677:
						position, tokenIndex = position677, tokenIndex677
					}
					{
						position678, tokenIndex678 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l679
						}
						position++
						goto l678
					l679:
						position, tokenIndex = position678, tokenIndex678
						if buffer[position] != rune('s') {
							goto l680
						}
						position++
						goto l678
					l680:
						position, tokenIndex = position678, tokenIndex678
						if buffer[position] != rune('d') {
							goto l681
						}
						position++
						goto l678
					l681:
						position, tokenIndex = position678, tokenIndex678
						if buffer[position] != rune('h') {
							goto l682
						}
						position++
						goto l678
					l682:
						position, tokenIndex = position678, tokenIndex678
						if buffer[position] != rune('q') {
							goto l674
						}
						position++
					}
				l678:
					{
						position683, tokenIndex683 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l683
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l683
						}
						position++
						{
							position685, tokenIndex685 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l685
							}
							position++
							goto l686
						l685:
							position, tokenIndex = position685, tokenIndex685
						}
					l686:
						if buffer[position] != rune(']') {
							goto l683
						}
						position++
						goto l684
					l683:
						position, tokenIndex = position683, tokenIndex683
					}
				l684:
					goto l675
				l674:
					position, tokenIndex = position674, tokenIndex674
				}
			l675:
				add(ruleARMVectorRegister, position669)
			}
			memoize(44, position668, tokenIndex668, true)
			return true
		l668:
			memoize(44, position668, tokenIndex668, false)
			position, tokenIndex = position668, tokenIndex668
			return false
		},
		/* 45 MemoryRef <- <((SymbolRef BaseIndexScale) / SymbolRef / Low12BitsSymbolRef / (Offset* BaseIndexScale) / (SegmentRegister Offset BaseIndexScale) / (SegmentRegister BaseIndexScale) / (SegmentRegister Offset) / ARMBaseIndexScale / BaseIndexScale)> */
		func() bool {
			if memoized, ok := memoization[memoKey{45, position}]; ok {
				return memoizedResult(memoized)
			}
			position687, tokenIndex687 := position, tokenIndex
			{
				position688 := position
				{
					position689, tokenIndex689 := position, tokenIndex
					if !_rules[ruleSymbolRef]() {
						goto l690
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l690
					}
					goto l689
				l690:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleSymbolRef]() {
						goto l691
					}
					goto l689
				l691:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleLow12BitsSymbolRef]() {
						goto l692
					}
					goto l689
				l692:
					position, tokenIndex = position689, tokenIndex689
				l694:
					{
						position695, tokenIndex695 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l695
						}
						goto l694
					l695:
						position, tokenIndex = position695, tokenIndex695
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l693
					}
					goto l689
				l693:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleSegmentRegister]() {
						goto l696
					}
					if !_rules[ruleOffset]() {
						goto l696
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l696
					}
					goto l689
				l696:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleSegmentRegister]() {
						goto l697
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l697
					}
					goto l689
				l697:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleSegmentRegister]() {
						goto l698
					}
					if !_rules[ruleOffset]() {
						goto l698
					}
					goto l689
				l698:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleARMBaseIndexScale]() {
						goto l699
					}
					goto l689
				l699:
					position, tokenIndex = position689, tokenIndex689
					if !_rules[ruleBaseIndexScale]() {
						goto l687
					}
				}
			l689:
				add(ruleMemoryRef, position688)
			}
			memoize(45, position687, tokenIndex687, true)
			return true
		l687:
			memoize(45, position687, tokenIndex687, false)
			position, tokenIndex = position687, tokenIndex687
			return false
		},
		/* 46 SymbolRef <- <((Offset* '+')? (LocalSymbol / SymbolName) Offset* ('@' Section Offset*)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{46, position}]; ok {
				return memoizedResult(memoized)
			}
			position700, tokenIndex700 := position, tokenIndex
			{
				position701 := position
				{
					position702, tokenIndex702 := position, tokenIndex
				l704:
					{
						position705, tokenIndex705 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l705
						}
						goto l704
					l705:
						position, tokenIndex = position705, tokenIndex705
					}
					if buffer[position] != rune('+') {
						goto l702
					}
					position++
					goto l703
				l702:
					position, tokenIndex = position702, tokenIndex702
				}
			l703:
				{
					position706, tokenIndex706 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l707
					}
					goto l706
				l707:
					position, tokenIndex = position706, tokenIndex706
					if !_rules[ruleSymbolName]() {
						goto l700
					}
				}
			l706:
			l708:
				{
					position709, tokenIndex709 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l709
					}
					goto l708
				l709:
					position, tokenIndex = position709, tokenIndex709
				}
				{
					position710, tokenIndex710 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l710
					}
					position++
					if !_rules[ruleSection]() {
						goto l710
					}
				l712:
					{
						position713, tokenIndex713 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l713
						}
						goto l712
					l713:
						position, tokenIndex = position713, tokenIndex713
					}
					goto l711
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
			l711:
				add(ruleSymbolRef, position701)
			}
			memoize(46, position700, tokenIndex700, true)
			return true
		l700:
			memoize(46, position700, tokenIndex700, false)
			position, tokenIndex = position700, tokenIndex700
			return false
		},
		/* 47 Low12BitsSymbolRef <- <(':' ('l' / 'L') ('o' / 'O') '1' '2' ':' (LocalSymbol / SymbolName) Offset?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{47, position}]; ok {
				return memoizedResult(memoized)
			}
			position714, tokenIndex714 := position, tokenIndex
			{
				position715 := position
				if buffer[position] != rune(':') {
					goto l714
				}
				position++
				{
					position716, tokenIndex716 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l717
					}
					position++
					goto l716
				l717:
					position, tokenIndex = position716, tokenIndex716
					if buffer[position] != rune('L') {
						goto l714
					}
					position++
				}
			l716:
				{
					position718, tokenIndex718 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l719
					}
					position++
					goto l718
				l719:
					position, tokenIndex = position718, tokenIndex718
					if buffer[position] != rune('O') {
						goto l714
					}
					position++
				}
			l718:
				if buffer[position] != rune('1') {
					goto l714
				}
				position++
				if buffer[position] != rune('2') {
					goto l714
				}
				position++
				if buffer[position] != rune(':') {
					goto l714
				}
				position++
				{
					position720, tokenIndex720 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l721
					}
					goto l720
				l721:
					position, tokenIndex = position720, tokenIndex720
					if !_rules[ruleSymbolName]() {
						goto l714
					}
				}
			l720:
				{
					position722, tokenIndex722 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l722
					}
					goto l723
				l722:
					position, tokenIndex = position722, tokenIndex722
				}
			l723:
				add(ruleLow12BitsSymbolRef, position715)
			}
			memoize(47, position714, tokenIndex714, true)
			return true
		l714:
			memoize(47, position714, tokenIndex714, false)
			position, tokenIndex = position714, tokenIndex714
			return false
		},
		/* 48 ARMBaseIndexScale <- <('[' ARMRegister (',' WS? (('#' Offset (('*' [0-9]+) / ('*' '(' [0-9]+ Operator [0-9]+ ')') / ('+' [0-9]+)*)?) / ARMGOTLow12 / Low12BitsSymbolRef / ARMRegister) (',' WS? ARMConstantTweak)?)? ']' ARMPostincrement?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{48, position}]; ok {
				return memoizedResult(memoized)
			}
			position724, tokenIndex724 := position, tokenIndex
			{
				position725 := position
				if buffer[position] != rune('[') {
					goto l724
				}
				position++
				if !_rules[ruleARMRegister]() {
					goto l724
				}
				{
					position726, tokenIndex726 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l726
					}
					position++
					{
						position728, tokenIndex728 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l728
						}
						goto l729
					l728:
						position, tokenIndex = position728, tokenIndex728
					}
				l729:
					{
						position730, tokenIndex730 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l731
						}
						position++
						if !_rules[ruleOffset]() {
							goto l731
						}
						{
							position732, tokenIndex732 := position, tokenIndex
							{
								position734, tokenIndex734 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l735
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l735
								}
								position++
							l736:
								{
									position737, tokenIndex737 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l737
									}
									position++
									goto l736
								l737:
									position, tokenIndex = position737, tokenIndex737
								}
								goto l734
							l735:
								position, tokenIndex = position734, tokenIndex734
								if buffer[position] != rune('*') {
									goto l738
								}
								position++
								if buffer[position] != rune('(') {
									goto l738
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l738
								}
								position++
							l739:
								{
									position740, tokenIndex740 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l740
									}
									position++
									goto l739
								l740:
									position, tokenIndex = position740, tokenIndex740
								}
								if !_rules[ruleOperator]() {
									goto l738
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l738
								}
								position++
							l741:
								{
									position742, tokenIndex742 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l742
									}
									position++
									goto l741
								l742:
									position, tokenIndex = position742, tokenIndex742
								}
								if buffer[position] != rune(')') {
									goto l738
								}
								position++
								goto l734
							l738:
								position, tokenIndex = position734, tokenIndex734
							l743:
								{
									position744, tokenIndex744 := position, tokenIndex
									if buffer[position] != rune('+') {
										goto l744
									}
									position++
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l744
									}
									position++
								l745:
									{
										position746, tokenIndex746 := position, tokenIndex
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l746
										}
										position++
										goto l745
									l746:
										position, tokenIndex = position746, tokenIndex746
									}
									goto l743
								l744:
									position, tokenIndex = position744, tokenIndex744
								}
							}
						l734:
							goto l733

							position, tokenIndex = position732, tokenIndex732
						}
					l733:
						goto l730
					l731:
						position, tokenIndex = position730, tokenIndex730
						if !_rules[ruleARMGOTLow12]() {
							goto l747
						}
						goto l730
					l747:
						position, tokenIndex = position730, tokenIndex730
						if !_rules[ruleLow12BitsSymbolRef]() {
							goto l748
						}
						goto l730
					l748:
						position, tokenIndex = position730, tokenIndex730
						if !_rules[ruleARMRegister]() {
							goto l726
						}
					}
				l730:
					{
						position749, tokenIndex749 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l749
						}
						position++
						{
							position751, tokenIndex751 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l751
							}
							goto l752
						l751:
							position, tokenIndex = position751, tokenIndex751
						}
					l752:
						if !_rules[ruleARMConstantTweak]() {
							goto l749
						}
						goto l750
					l749:
						position, tokenIndex = position749, tokenIndex749
					}
				l750:
					goto l727
				l726:
					position, tokenIndex = position726, tokenIndex726
				}
			l727:
				if buffer[position] != rune(']') {
					goto l724
				}
				position++
				{
					position753, tokenIndex753 := position, tokenIndex
					if !_rules[ruleARMPostincrement]() {
						goto l753
					}
					goto l754
				l753:
					position, tokenIndex = position753, tokenIndex753
				}
			l754:
				add(ruleARMBaseIndexScale, position725)
			}
			memoize(48, position724, tokenIndex724, true)
			return true
		l724:
			memoize(48, position724, tokenIndex724, false)
			position, tokenIndex = position724, tokenIndex724
			return false
		},
		/* 49 ARMGOTLow12 <- <(':' ('g' / 'G') ('o' / 'O') ('t' / 'T') '_' ('l' / 'L') ('o' / 'O') '1' '2' ':' SymbolName)> */
		func() bool {
			if memoized, ok := memoization[memoKey{49, position}]; ok {
				return memoizedResult(memoized)
			}
			position755, tokenIndex755 := position, tokenIndex
			{
				position756 := position
				if buffer[position] != rune(':') {
					goto l755
				}
				position++
				{
					position757, tokenIndex757 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l758
					}
					position++
					goto l757
				l758:
					position, tokenIndex = position757, tokenIndex757
					if buffer[position] != rune('G') {
						goto l755
					}
					position++
				}
			l757:
				{
					position759, tokenIndex759 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l760
					}
					position++
					goto l759
				l760:
					position, tokenIndex = position759, tokenIndex759
					if buffer[position] != rune('O') {
						goto l755
					}
					position++
				}
			l759:
				{
					position761, tokenIndex761 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l762
					}
					position++
					goto l761
				l762:
					position, tokenIndex = position761, tokenIndex761
					if buffer[position] != rune('T') {
						goto l755
					}
					position++
				}
			l761:
				if buffer[position] != rune('_') {
					goto l755
				}
				position++
				{
					position763, tokenIndex763 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l764
					}
					position++
					goto l763
				l764:
					position, tokenIndex = position763, tokenIndex763
					if buffer[position] != rune('L') {
						goto l755
					}
					position++
				}
			l763:
				{
					position765, tokenIndex765 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l766
					}
					position++
					goto l765
				l766:
					position, tokenIndex = position765, tokenIndex765
					if buffer[position] != rune('O') {
						goto l755
					}
					position++
				}
			l765:
				if buffer[position] != rune('1') {
					goto l755
				}
				position++
				if buffer[position] != rune('2') {
					goto l755
				}
				position++
				if buffer[position] != rune(':') {
					goto l755
				}
				position++
				if !_rules[ruleSymbolName]() {
					goto l755
				}
				add(ruleARMGOTLow12, position756)
			}
			memoize(49, position755, tokenIndex755, true)
			return true
		l755:
			memoize(49, position755, tokenIndex755, false)
			position, tokenIndex = position755, tokenIndex755
			return false
		},
		/* 50 ARMPostincrement <- <'!'> */
		func() bool {
			if memoized, ok := memoization[memoKey{50, position}]; ok {
				return memoizedResult(memoized)
			}
			position767, tokenIndex767 := position, tokenIndex
			{
				position768 := position
				if buffer[position] != rune('!') {
					goto l767
				}
				position++
				add(ruleARMPostincrement, position768)
			}
			memoize(50, position767, tokenIndex767, true)
			return true
		l767:
			memoize(50, position767, tokenIndex767, false)
			position, tokenIndex = position767, tokenIndex767
			return false
		},
		/* 51 BaseIndexScale <- <('(' RegisterOrConstant? WS? (',' WS? RegisterOrConstant WS? (',' [0-9]+)?)? ')')> */
		func() bool {
			if memoized, ok := memoization[memoKey{51, position}]; ok {
				return memoizedResult(memoized)
			}
			position769, tokenIndex769 := position, tokenIndex
			{
				position770 := position
				if buffer[position] != rune('(') {
					goto l769
				}
				position++
				{
					position771, tokenIndex771 := position, tokenIndex
					if !_rules[ruleRegisterOrConstant]() {
						goto l771
					}
					goto l772
				l771:
					position, tokenIndex = position771, tokenIndex771
				}
			l772:
				{
					position773, tokenIndex773 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l773
					}
					goto l774
				l773:
					position, tokenIndex = position773, tokenIndex773
				}
			l774:
				{
					position775, tokenIndex775 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l775
					}
					position++
					{
						position777, tokenIndex777 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l777
						}
						goto l778
					l777:
						position, tokenIndex = position777, tokenIndex777
					}
				l778:
					if !_rules[ruleRegisterOrConstant]() {
						goto l775
					}
					{
						position779, tokenIndex779 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l779
						}
						goto l780
					l779:
						position, tokenIndex = position779, tokenIndex779
					}
				l780:
					{
						position781, tokenIndex781 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l781
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l781
						}
						position++
					l783:
						{
							position784, tokenIndex784 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l784
							}
							position++
							goto l783
						l784:
							position, tokenIndex = position784, tokenIndex784
						}
						goto l782
					l781:
						position, tokenIndex = position781, tokenIndex781
					}
				l782:
					goto l776
				l775:
					position, tokenIndex = position775, tokenIndex775
				}
			l776:
				if buffer[position] != rune(')') {
					goto l769
				}
				position++
				add(ruleBaseIndexScale, position770)
			}
			memoize(51, position769, tokenIndex769, true)
			return true
		l769:
			memoize(51, position769, tokenIndex769, false)
			position, tokenIndex = position769, tokenIndex769
			return false
		},
		/* 52 Operator <- <('+' / '-')> */
		func() bool {
			if memoized, ok := memoization[memoKey{52, position}]; ok {
				return memoizedResult(memoized)
			}
			position785, tokenIndex785 := position, tokenIndex
			{
				position786 := position
				{
					position787, tokenIndex787 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l788
					}
					position++
					goto l787
				l788:
					position, tokenIndex = position787, tokenIndex787
					if buffer[position] != rune('-') {
						goto l785
					}
					position++
				}
			l787:
				add(ruleOperator, position786)
			}
			memoize(52, position785, tokenIndex785, true)
			return true
		l785:
			memoize(52, position785, tokenIndex785, false)
			position, tokenIndex = position785, tokenIndex785
			return false
		},
		/* 53 Offset <- <('+'? '-'? (('0' ('b' / 'B') ('0' / '1')+) / ('0' ('x' / 'X') ([0-9] / [0-9] / ([a-f] / [A-F]))+) / [0-9]+))> */
		func() bool {
			if memoized, ok := memoization[memoKey{53, position}]; ok {
				return memoizedResult(memoized)
			}
			position789, tokenIndex789 := position, tokenIndex
			{
				position790 := position
				{
					position791, tokenIndex791 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l791
					}
					position++
					goto l792
				l791:
					position, tokenIndex = position791, tokenIndex791
				}
			l792:
				{
					position793, tokenIndex793 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l793
					}
					position++
					goto l794
				l793:
					position, tokenIndex = position793, tokenIndex793
				}
			l794:
				{
					position795, tokenIndex795 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l796
					}
					position++
					{
						position797, tokenIndex797 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l798
						}
						position++
						goto l797
					l798:
						position, tokenIndex = position797, tokenIndex797
						if buffer[position] != rune('B') {
							goto l796
						}
						position++
					}
				l797:
					{
						position801, tokenIndex801 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l802
						}
						position++
						goto l801
					l802:
						position, tokenIndex = position801, tokenIndex801
						if buffer[position] != rune('1') {
							goto l796
						}
						position++
					}
				l801:
				l799:
					{
						position800, tokenIndex800 := position, tokenIndex
						{
							position803, tokenIndex803 := position, tokenIndex
							if buffer[position] != rune('0') {
								goto l804
							}
							position++
							goto l803
						l804:
							position, tokenIndex = position803, tokenIndex803
							if buffer[position] != rune('1') {
								goto l800
							}
							position++
						}
					l803:
						goto l799
					l800:
						position, tokenIndex = position800, tokenIndex800
					}
					goto l795
				l796:
					position, tokenIndex = position795, tokenIndex795
					if buffer[position] != rune('0') {
						goto l805
					}
					position++
					{
						position806, tokenIndex806 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l807
						}
						position++
						goto l806
					l807:
						position, tokenIndex = position806, tokenIndex806
						if buffer[position] != rune('X') {
							goto l805
						}
						position++
					}
				l806:
					{
						position810, tokenIndex810 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l811
						}
						position++
						goto l810
					l811:
						position, tokenIndex = position810, tokenIndex810
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l812
						}
						position++
						goto l810
					l812:
						position, tokenIndex = position810, tokenIndex810
						{
							position813, tokenIndex813 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l814
							}
							position++
							goto l813
						l814:
							position, tokenIndex = position813, tokenIndex813
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l805
							}
							position++
						}
					l813:
					}
				l810:
				l808:
					{
						position809, tokenIndex809 := position, tokenIndex
						{
							position815, tokenIndex815 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l816
							}
							position++
							goto l815
						l816:
							position, tokenIndex = position815, tokenIndex815
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l817
							}
							position++
							goto l815
						l817:
							position, tokenIndex = position815, tokenIndex815
							{
								position818, tokenIndex818 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('f') {
									goto l819
								}
								position++
								goto l818
							l819:
								position, tokenIndex = position818, tokenIndex818
								if c := buffer[position]; c < rune('A') || c > rune('F') {
									goto l809
								}
								position++
							}
						l818:
						}
					l815:
						goto l808
					l809:
						position, tokenIndex = position809, tokenIndex809
					}
					goto l795
				l805:
					position, tokenIndex = position795, tokenIndex795
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l789
					}
					position++
				l820:
					{
						position821, tokenIndex821 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l821
						}
						position++
						goto l820
					l821:
						position, tokenIndex = position821, tokenIndex821
					}
				}
			l795:
				add(ruleOffset, position790)
			}
			memoize(53, position789, tokenIndex789, true)
			return true
		l789:
			memoize(53, position789, tokenIndex789, false)
			position, tokenIndex = position789, tokenIndex789
			return false
		},
		/* 54 Section <- <([a-z] / [A-Z] / '@')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{54, position}]; ok {
				return memoizedResult(memoized)
			}
			position822, tokenIndex822 := position, tokenIndex
			{
				position823 := position
				{
					position826, tokenIndex826 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l827
					}
					position++
					goto l826
				l827:
					position, tokenIndex = position826, tokenIndex826
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l828
					}
					position++
					goto l826
				l828:
					position, tokenIndex = position826, tokenIndex826
					if buffer[position] != rune('@') {
						goto l822
					}
					position++
				}
			l826:
			l824:
				{
					position825, tokenIndex825 := position, tokenIndex
					{
						position829, tokenIndex829 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l830
						}
						position++
						goto l829
					l830:
						position, tokenIndex = position829, tokenIndex829
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l831
						}
						position++
						goto l829
					l831:
						position, tokenIndex = position829, tokenIndex829
						if buffer[position] != rune('@') {
							goto l825
						}
						position++
					}
				l829:
					goto l824
				l825:
					position, tokenIndex = position825, tokenIndex825
				}
				add(ruleSection, position823)
			}
			memoize(54, position822, tokenIndex822, true)
			return true
		l822:
			memoize(54, position822, tokenIndex822, false)
			position, tokenIndex = position822, tokenIndex822
			return false
		},
		/* 55 SegmentRegister <- <('%' ([c-g] / 's') ('s' ':'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{55, position}]; ok {
				return memoizedResult(memoized)
			}
			position832, tokenIndex832 := position, tokenIndex
			{
				position833 := position
				if buffer[position] != rune('%') {
					goto l832
				}
				position++
				{
					position834, tokenIndex834 := position, tokenIndex
					if c := buffer[position]; c < rune('c') || c > rune('g') {
						goto l835
					}
					position++
					goto l834
				l835:
					position, tokenIndex = position834, tokenIndex834
					if buffer[position] != rune('s') {
						goto l832
					}
					position++
				}
			l834:
				if buffer[position] != rune('s') {
					goto l832
				}
				position++
				if buffer[position] != rune(':') {
					goto l832
				}
				position++
				add(ruleSegmentRegister, position833)
			}
			memoize(55, position832, tokenIndex832, true)
			return true
		l832:
			memoize(55, position832, tokenIndex832, false)
			position, tokenIndex = position832, tokenIndex832
			return false
		},
	}
	p.rules = _rules
	return nil
}
